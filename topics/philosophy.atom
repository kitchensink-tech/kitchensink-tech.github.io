<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title type="text">
        The Kitchen Sink Blog Generator
    </title>
    <id>
        https://kitchensink-tech.github.io/atom.xml
    </id>
    <updated>
        1970-01-01T00:00:00Z
    </updated>
    <entry>
        <id>
            https://kitchensink-tech.github.io/design-points.html
        </id>
        <title type="text">
            Design points
        </title>
        <updated>
            1970-01-01T00:00:00Z
        </updated>
        <author>
            <name>
                Lucas DiCioccio
            </name>
        </author>
        <content type="html">
            &lt;div class="main-article"&gt;&lt;section class="main-section"&gt;&lt;h1 id="the-default-site-loader-is-a-kitchen-sink"&gt;The default site-loader is a kitchen-sink&lt;/h1&gt; &lt;p&gt;This tradeoff gave name to the whole tool. In short, KitchenSink loads site contents in a directory which has no organization whatsoever. All files must be in a same directory and map to a target based on filenames and filetypes.&lt;/p&gt; &lt;p&gt;It is often the case that in static-site generators like Jekyll you need to organize your posts, categories and so on in a given directory structure, sometimes by year etc. Other ones, like Hakyll, requires you to configure globbing patterns. KitchenSink takes the opposite approach because what wrench my heart is when I see a personal blog with as few as two posts in them for someone who took all the time to setup a static-site generator.&lt;/p&gt; &lt;p&gt;Besides convenience, having a large kitchen sink means:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;we prevents the annoyance of conflicts in names, prefixing by year and so on can go in filenames &lt;/li&gt; &lt;li&gt;we reduce the URL churn because we often move and shake hierarchies around but the content of leaves remains unchanged (I‚Äôve no data for this but it‚Äôs a feeling) &lt;/li&gt; &lt;li&gt;when you look for some file you know where it is &lt;/li&gt; &lt;li&gt;when you need to add some file you know where to put it &lt;/li&gt; &lt;li&gt;if someones grows out of the limitation of the single-directory approach, they met success and will be ready to allocate some time to either adapt KitchenSink to load the site from different place or to switch to another static-site generator &lt;/li&gt; &lt;/ul&gt; &lt;h1 id="layouts-are-hard-to-change"&gt;Layouts are hard to change&lt;/h1&gt; &lt;ul&gt; &lt;li&gt;Wordpress, Blogspot online services are a testimonial that tuning layouts may not be that much important for people; tuning layouts for people who really want to do it is feasible because the code is open-source, and corporations or professionals should afford to pay something more ‚Äúhand-tuned‚Äù (they may even consider KitchenSink is not a good solution to their needs) &lt;/li&gt; &lt;li&gt;nowadays we can significantly alter the look and even some UX-interactivity with CSS only &lt;/li&gt; &lt;li&gt;you can even do JavaScript in KitchenSink pages to add even more ‚Äúinteractivity &lt;/li&gt; &lt;li&gt;you can even provide control of all the page to a single-page application if you want &lt;/li&gt; &lt;li&gt;I believe people should focus more time on the content rather than on the wrapping, thus having fewer knobs makes it a liberating constraint &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;span class="emoji" data-emoji="point_right"&gt;üëâ&lt;/span&gt; note that some re-engineering is going on in KitchenSink to separate the layout engine more cleanly from the rest of the engine. We could soon support some form of templates, however it is clearly not a direction I need personally at this point.&lt;/p&gt; &lt;h1 id="generator-sections-dont-take-input-data"&gt;Generator sections don‚Äôt take input data&lt;/h1&gt; &lt;ul&gt; &lt;li&gt;design is still unclear to me (static-website with dynamic envy) &lt;/li&gt; &lt;li&gt;sequence of steps may be better handled outside the generator &lt;/li&gt; &lt;li&gt;definitely a security risk that prevent some ‚Äòhosting scenarios‚Äô &lt;/li&gt; &lt;/ul&gt; &lt;h1 id="lack-of-overloading-repeating-many-things-across-articles"&gt;Lack of overloading (repeating many things across articles)&lt;/h1&gt; &lt;p&gt;&lt;span class="emoji" data-emoji="bulb"&gt;üí°&lt;/span&gt; Much of this concerned is now addressable using &lt;a href="/sections-dhall.html"&gt;Dhall-sections&lt;/a&gt; sections because Dhall has local (and even remote) imports. However we keep the discussion below for archival reasons.&lt;/p&gt; &lt;p&gt;Oftentimes you would like one parameter to take effect on multiple pages (e.g., the social links). KitchenSink edges on the side of caution where we prefer to repeat the same small bit of information many times rather than forcing an overloading hierarchy:&lt;/p&gt; &lt;p&gt;Often you end up requiring to overload some ‚Äúglobal parameter‚Äù, which means you need special documentation, special handling for overloading the parameter, which in turn means you need strictly more code just than just assuming the global parameter is empty. I call that &lt;em&gt;adding code to remove features&lt;/em&gt;.&lt;/p&gt; &lt;p&gt;For a blog-like page, I think it would be infrequent to add new pages. Adding one substential article per week means only around 50 articles a year. I‚Äôm pretty sure only few blog-like pages have that many articles and the effort to write them is diluted over long periods of time. Thus, overall, I prefer to force having a ‚Äòsocial links‚Äô session in every page. CSS is the only case I can think of where you‚Äôd need substential copy-pasting across articles. And for this use case, CSS supports &lt;code&gt;@import&lt;/code&gt; directives.&lt;/p&gt; &lt;p&gt;In the end, by repeating things across articles: the edge case where you want to tune a parameter on a single article is already supported with less code. The associated overhead is rather small and easy to circumvent with a low-tech solution (e.g., you‚Äôd copy section-based files from a template you keep around for yourself ‚Äì much like the scaffolding in the &lt;a href="/getting-started.html"&gt;getting started article&lt;/a&gt;). In the eventual case where one needs to change values (e.g., they changed their Twitter handle), it is still possible to modify articles in batch with some shell scripting and &lt;code&gt;sed -i&lt;/code&gt;.&lt;/p&gt; &lt;/section&gt;&lt;/div&gt;
        </content>
        <link href="https://kitchensink-tech.github.io/design-points.html" rel="alternate"/>
        <summary type="text">
            This article gives a number of design points and architecture tradeoffs.
        </summary>
    </entry>
    <entry>
        <id>
            https://kitchensink-tech.github.io/other-formats.html
        </id>
        <title type="text">
            Other types of files
        </title>
        <updated>
            1970-01-01T00:00:00Z
        </updated>
        <author>
            <name>
                Lucas DiCioccio
            </name>
        </author>
        <content type="html">
            &lt;div class="main-article"&gt;&lt;section class="main-section"&gt;&lt;p&gt;Besides generating content from &lt;code&gt;.cmark&lt;/code&gt; &lt;a href="/sections.html"&gt;section-based&lt;/a&gt; files, KitchenSink also copies some video and images, and knows how to call in some generators for very specific formats.&lt;/p&gt; &lt;h2 id="videos"&gt;videos&lt;/h2&gt; &lt;p&gt;KitchenSink copies &lt;code&gt;.webm&lt;/code&gt; and &lt;code&gt;.mp4&lt;/code&gt; files under &lt;code&gt;/videos&lt;/code&gt;.&lt;/p&gt; &lt;h2 id="images"&gt;images&lt;/h2&gt; &lt;p&gt;KitchenSink copies &lt;code&gt;.jpg&lt;/code&gt;, &lt;code&gt;.jpeg&lt;/code&gt;, and &lt;code&gt;.png&lt;/code&gt; files under &lt;code&gt;/images&lt;/code&gt;.&lt;/p&gt; &lt;h2 id="documents"&gt;documents&lt;/h2&gt; &lt;p&gt;KitchenSink copies &lt;code&gt;.pdf&lt;/code&gt; files under &lt;code&gt;/docs&lt;/code&gt;.&lt;/p&gt; &lt;h2 id="html"&gt;HTML&lt;/h2&gt; &lt;p&gt;KitchenSink copies &lt;code&gt;.html&lt;/code&gt; files under &lt;code&gt;/&lt;/code&gt; that is, with no prefix.&lt;/p&gt; &lt;p&gt;The main use-case is to allow porting some other website to KitchenSink, starting from some imported &lt;code&gt;.html&lt;/code&gt; Other usages could be to support things like webmaster-verification tools on Google.&lt;/p&gt; &lt;p&gt;&lt;span class="emoji" data-emoji="warning"&gt;‚ö†Ô∏è&lt;/span&gt; there is no conflict detection yet so avoid having a &lt;code&gt;.cmark&lt;/code&gt; matching a &lt;code&gt;.html&lt;/code&gt; file or you risk inconsistencies.&lt;/p&gt; &lt;h2 id="javascript"&gt;javascript&lt;/h2&gt; &lt;p&gt;KitchenSink copies &lt;code&gt;.js&lt;/code&gt; files under &lt;code&gt;/js&lt;/code&gt;.&lt;/p&gt; &lt;h2 id="so-called-raw-files"&gt;So-called raw files&lt;/h2&gt; &lt;p&gt;KitchenSink copies &lt;code&gt;.txt&lt;/code&gt;, &lt;code&gt;.json&lt;/code&gt;, &lt;code&gt;.csv&lt;/code&gt;, and &lt;code&gt;.dhall&lt;/code&gt; files under &lt;code&gt;/raw&lt;/code&gt; &lt;strong&gt;excepts for robots.txt and kitchen-sink.json&lt;/strong&gt;. I use this feature for attaching datasets or showing a long text result (e.g., a long output of a command that is too slow to generate).&lt;/p&gt; &lt;p&gt;&lt;strong&gt;exception&lt;/strong&gt;. The file &lt;code&gt;robots.txt&lt;/code&gt; stays at the root of the output dir to meet the &lt;a href="https://en.wikipedia.org/wiki/Robots_exclusion_standard"&gt;robots exclusion standard&lt;/a&gt;.&lt;/p&gt; &lt;h2 id="graphviz-dot-files"&gt;GraphViz dot files&lt;/h2&gt; &lt;p&gt;KitchenSink calls &lt;code&gt;dot&lt;/code&gt; to generate under &lt;code&gt;/gen/images/&amp;lt;filename&amp;gt;.png&lt;/code&gt;. There is little support to control the command that KitchenSink handles. If you need more control, generate pictures aside or use a command-section.&lt;/p&gt; &lt;/section&gt;&lt;/div&gt;
        </content>
        <link href="https://kitchensink-tech.github.io/other-formats.html" rel="alternate"/>
        <summary type="text">
            There is more to a blog than just CommonMark HTML. This article explains briefly how the KitchenSink engine handles other format.
        </summary>
    </entry>
    <entry>
        <id>
            https://kitchensink-tech.github.io/philosophy.html
        </id>
        <title type="text">
            The Kitchen Sink philosophy
        </title>
        <updated>
            1970-01-01T00:00:00Z
        </updated>
        <author>
            <name>
                Lucas DiCioccio
            </name>
        </author>
        <content type="html">
            &lt;div class="main-article"&gt;&lt;section class="main-section"&gt;&lt;p&gt;In these pages, I sometimes use ‚Äú&lt;strong&gt;It‚Äôs a kitchen-sink!&lt;/strong&gt;‚Äù as a placeholder for apologetic or unapologetic statements regarding the lack of sophistication of Kitchen-Sink. I lament when something is suboptimal but ought to be improved. I duck out when something is suboptimal but ought to be left out scope. Let me explain the three Kitchen-Sink tenets.&lt;/p&gt; &lt;h1 id="the-kitchen-sink-tenets"&gt;The Kitchen-Sink tenets&lt;/h1&gt; &lt;p&gt;The name of the blog-engine is not just a pun about where just dumping files in a directory to make a blog. There‚Äôs some philosophy behind the name, a philosophy that I grew out of experience: a mix of frivolity, defeatism, and awe ‚Äì applied to small static sites and blogs.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Frivolity&lt;/strong&gt;. When you are too lazy to wash and sort plates, you drop them in the kitchen sink. You‚Äôll come back later. In short, &lt;em&gt;take it easy&lt;/em&gt;. The world is tough enough to add extra-high expectation onto oneself. Blogging should be the similarly lightweight. Unless you want to make a career out of blogging, you should be frivolous about your online site.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Defeatism&lt;/strong&gt;. Humans often fall in for the same traps. Rather than doing something, we find roundabout ways for not doing them. A sure-fire way for engineers to lose time is while trying to organize things in large hierarchies and inter-connected ontologies ‚Ä¶ when there is alomost no content to organize. Blogging is the primary use-case for Kitchen-sink. In this context, I feel afraid that people spend time organizing and preparing a blog but then write no articles. Rather, I think the key value of blogs is in having content from people voicing their unique opinions. If it‚Äôs only in text files with no colors, then so be it.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Awe&lt;/strong&gt;. I have a huge amount of respect for scrapy and low-tech solutions providing outsized results. Such solutions typically &lt;em&gt;do not scale&lt;/em&gt; and require engineering to step up in intrisinc (or perceived) quality. When asked to grow a low-tech solution into some more professional service, engineers tend to codify processes and invent complex hierarchies before having any content to arrange (cf. the above point on defeatism). When approaching the world with a frivolous mindset, a tool that only works for the easy-mode will feel awesome because these easy problems will be the ones you‚Äôll encounter most of the time. Regarding blogging this tenet means that the world improves when articles are written, even if these articles lack perfection.&lt;/p&gt; &lt;h1 id="implications-of-the-kitchen-sink-tenets-regarding-the-blog-engine"&gt;Implications of the Kitchen Sink tenets regarding the blog engine&lt;/h1&gt; &lt;p&gt;There are a few implications and many possible misunderstanding regarding the tenets. In particular being &lt;em&gt;frivolous&lt;/em&gt; and in &lt;em&gt;awe&lt;/em&gt; of scrapy solutions looks like being in opposition with ‚Äúprofessional‚Äù.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Organization-wise&lt;/strong&gt;. Kitchen-Sink is not a good fit if you have strong opinions about hierarchies of information. Rather, the modus-operandi is: thinking about writing something? throw it into the Kitchen Sink. Where do we put source files? in the Kitchen-Sink; where do we put CSS files? in the Kitchen-Sink; where do we save images? in the Kitchen-Sink. If someone looks for what you have written: they can look in the Kitchen Sink. If people do not find what they are looking for, then only it may become interesting to add extra structure. You may even want to grow out of Kitchen-Sink and it‚Äôs fine. The Kitchen-Sink philosophy will help you with that because you won‚Äôt have annoying problems like file conflict names to start with. In short, throw things in the Kitchen Sink, it‚Äôs easy to remove them from here anyway.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Project-wise.&lt;/strong&gt; I think that there is a distinction between honest but hard-to-swallow feedback and contempt or guardkeeping. Thus, when someone approaches Kitchen-Sink saying it is inadequate for their use case: good. When someone says the whole project is a waste of time because they already have a wash basin: not good. If we regard time as a scarce resource, then adding content to a site is a budget-allocation game where the time-budget is small. I can honestly say I‚Äôve lost so much time on &lt;em&gt;modern&lt;/em&gt; or &lt;em&gt;flexible&lt;/em&gt; or &lt;em&gt;$marketing-term&lt;/em&gt; tools. I believe a number of websites would benefit from having fewer features of the modern web and more content instead. I think the web would be better with more ugly websites having great content over pretty content-farmed websites. Markdown is awesome but you would prefer something else and do not want to contribute it? well, even though Kitchen-Sink could support new formats we‚Äôre not chasing features, we‚Äôre chasing content.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Technically.&lt;/strong&gt; Being frivolous and in awe of scrapy solutions does not mean that Kitchen-Sink should be irritating to use. Usability and correctness are a concern, otherwise some &lt;a href="/features.html"&gt;features&lt;/a&gt; like live-reload and the section-based format would not exist. Correctness may suffer a bit when things lack a good definition or inconsequential (e.g., the word-count not taking into account titles in the sections they start ‚Äì feature or bug, I cannot tell, but definitely not a huge deal).&lt;/p&gt; &lt;/section&gt;&lt;/div&gt;
        </content>
        <link href="https://kitchensink-tech.github.io/philosophy.html" rel="alternate"/>
        <summary type="text">
            In these pages, I sometimes use "__It's a kitchen-sink!__" as a placeholder for apologetic or unapologetic statements regarding the lack of sophistication of Kitchen-Sink. This article positions a few tenents for Kitchen-Sink, and hopefully helps you get a feel the experience we want to build around this software.
        </summary>
    </entry>
</feed>
