<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title type="text">
        The Kitchen Sink Blog Generator
    </title>
    <id>
        https://kitchensink-tech.github.io/atom.xml
    </id>
    <updated>
        1970-01-01T00:00:00Z
    </updated>
    <entry>
        <id>
            https://kitchensink-tech.github.io/getting-started.html
        </id>
        <title type="text">
            Getting started
        </title>
        <updated>
            1970-01-01T00:00:00Z
        </updated>
        <author>
            <name>
                Lucas DiCioccio
            </name>
        </author>
        <content type="html">
            &lt;div class="main-article"&gt;&lt;section class="main-section"&gt;&lt;h2 id="expectations"&gt;expectations&lt;/h2&gt; &lt;p&gt;At its core, KitchenSink is a static-site generator &lt;em&gt;library&lt;/em&gt; with merely a &lt;em&gt;default theme&lt;/em&gt;. That is, you can have multiple integration modes to run a KitchenSink-generated blog.&lt;/p&gt; &lt;p&gt;In this article, we browse you through the simple case where you are happy with a website that looks like this one – or at least has a similar HTML structure. As &lt;a href="http://www.csszengarden.com/"&gt;the CSS Zen Garden&lt;/a&gt; has demonstrated, one can do wonders with only styling. Future releases of KitchenSink may include layouts or websites that are not “showcased” on this documentation site.&lt;/p&gt; &lt;h2 id="pipeline"&gt;pipeline&lt;/h2&gt; &lt;p&gt;Before you get a website to entertain your readers, a number of steps are required. This guide navigates you through a subset of the complexity and assumes some familiarity with programming toolchains and workflows.&lt;/p&gt; &lt;p&gt;You need a few broad steps to get started:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;get KitchenSink source code &lt;/li&gt; &lt;li&gt;(optional, advanced) adapt the layout or the commands &lt;/li&gt; &lt;li&gt;compile KitchenSink &lt;/li&gt; &lt;li&gt;write some content &lt;/li&gt; &lt;li&gt;produce some HTML &lt;/li&gt; &lt;li&gt;publish your website &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;We illustrate these steps in the following picture (which we refer as &lt;em&gt;the dependency graph&lt;/em&gt; here):&lt;/p&gt; &lt;div class="figure"&gt; &lt;p&gt;&lt;img src="/gen/images/architecture-01-pipeline.dot.png" alt="KitchenSink building pipeline" /&gt;&lt;/p&gt; &lt;/div&gt; &lt;p&gt;The dependency graph starts from the left with tooling and move to the right towards an HTML website making readers happy. In the above pictures “egg” shapes represent tools whereas data files use a “file” shape.&lt;/p&gt; &lt;p&gt;The rest of this guide covers only some subset of the whole experience. In particular, we assume that the advanced-topic of editing KitchenSink layouts is out of scope. Also, we skip the “publish website” part; you should find some help on “hosting a static website” elsewhere – at this point we believe KitchenSink is so niche that you will figure out this part. We also assume that you know how to install and run programming tools on your machine.&lt;/p&gt; &lt;h2 id="requirements"&gt;requirements&lt;/h2&gt; &lt;p&gt;Requirements correspond to the “left leaves” tools in the dependency graph.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;some &lt;code&gt;git&lt;/code&gt; installation &lt;/li&gt; &lt;li&gt;some Haskell installation with &lt;code&gt;cabal&lt;/code&gt; (tested with &lt;code&gt;ghc&lt;/code&gt; 9.2.4), we recommend &lt;a href="https://www.haskell.org/ghcup/"&gt;ghcup&lt;/a&gt; if you have no Haskell toolchain preference yet &lt;/li&gt; &lt;li&gt;(optional) &lt;code&gt;graphviz&lt;/code&gt; for generating images from dot-sources &lt;/li&gt; &lt;li&gt;(optional) other commands you may want to use to generate contents &lt;/li&gt; &lt;li&gt;(not covered) some publication script to host a directory of static-files online (e.g., GitHub pages, Netlify) &lt;/li&gt; &lt;/ul&gt; &lt;h2 id="build-and-install-from-source"&gt;build and install from source&lt;/h2&gt; &lt;p&gt;The goal here is to build &lt;code&gt;kitchen-sink-exe&lt;/code&gt; in the dependency graph. Cabal’s install directory must be in your execution &lt;code&gt;PATH&lt;/code&gt; environment variable afterwards.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-console"&gt;git clone https://github.com/kitchensink-tech/kitchensink.git cd kitchensink/hs cabal build cabal install &lt;/code&gt;&lt;/pre&gt; &lt;h2 id="minimal-site-setup"&gt;minimal site setup&lt;/h2&gt; &lt;p&gt;The goal here is to run KitchenSink in server-mode (i.e., we do not output &lt;code&gt;.html&lt;/code&gt; files directly as shown in the dependency graph but we edit them live).&lt;/p&gt; &lt;p&gt;&lt;strong&gt;prepare a directory structure&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class="language-console"&gt;bash scaffolding/outputdir.sh www bash scaffolding/sourcedir.sh site-source &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;start the live-edit server&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class="language-console"&gt;kitchen-sink serve --srcDir site-source/ --outDir www/ --servMode DEV --port 7654 &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Then navigate to &lt;code&gt;http://localhost:7654/&lt;/code&gt; you’ll notice there are a few things to tune. Things like the page title must be changed in the &lt;a href="/kitchen-sink-dot-json"&gt;&lt;code&gt;kitchen-sink.json&lt;/code&gt;&lt;/a&gt; file (note: as of today when you edit this file, you need to restart the server for all parameters to be taken into account).&lt;/p&gt; &lt;p&gt;&lt;strong&gt;learn how to write articles&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;In your editor then you can add or edit new &lt;code&gt;.cmark&lt;/code&gt; files, try adding some “hello world” first. Then you can experiment with adding more involved &lt;a href="/sections.html"&gt;sections&lt;/a&gt; or various types of &lt;a href="/other-formats.html"&gt;contents&lt;/a&gt;&lt;/p&gt; &lt;h2 id="producing-html-contents"&gt;producing html contents&lt;/h2&gt; &lt;p&gt;Before producing some HTML contents to upload, you should modify the &lt;a href="/kitchen-sink-dot-json"&gt;&lt;code&gt;kitchen-sink.json&lt;/code&gt;&lt;/a&gt; file to give some title to your website and prepare tell the URL that will host your website once it is uploaded.&lt;/p&gt; &lt;p&gt;You either &lt;strong&gt;run &lt;code&gt;produce&lt;/code&gt; on the live preview&lt;/strong&gt; (note: as of today when you edit the &lt;code&gt;kitchen-sink.json&lt;/code&gt; file, you need to restart the server for all parameters to be taken into account) while running KitchenSink in serve mode.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Alternatively&lt;/strong&gt; you separately run the following command:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-console"&gt;kitchen-sink produce --srcDir site-source/ --outDir www/ &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;At this point the &lt;code&gt;www&lt;/code&gt; output dir should have the content for your website.&lt;/p&gt; &lt;script src="js/copy-snippets.js"&gt;&lt;/script&gt; &lt;/section&gt;&lt;/div&gt;
        </content>
        <link href="https://kitchensink-tech.github.io/getting-started.html" rel="alternate"/>
        <summary type="text">
            This article gets you started with KitchenSink. As of date, you need some amount of programming know-how.
        </summary>
    </entry>
    <entry>
        <id>
            https://kitchensink-tech.github.io/sections.html
        </id>
        <title type="text">
            The section-based format
        </title>
        <updated>
            1970-01-01T00:00:00Z
        </updated>
        <author>
            <name>
                Lucas DiCioccio
            </name>
        </author>
        <content type="html">
            &lt;div class="main-article"&gt;&lt;section class="main-section"&gt;&lt;p&gt;In my &lt;a href="https://dicioccio.fr/how-this-blog-works.html"&gt;first article about why I wrote my own blog-engine&lt;/a&gt;, I introduce an important separation between content and structure of articles. In short, the &lt;em&gt;meaty content&lt;/em&gt; is what readers are interested in, whereas structure is what readers navigate. You need both meaty content and some structure to make an article. However, you do not want to alternate switching between the two to &lt;a href="https://en.wikipedia.org/wiki/Flow_(psychology)"&gt;protect your state of flow&lt;/a&gt; while writing.&lt;/p&gt; &lt;p&gt;I grew the section-based format out of frustration using blogs that require templates with partials and special directory listings: I always felt like the added structure did not bring much. The key idea here is to put as much information in a same file as possible and just drop all files in a same directory (it’s a kitchen-sink after all). From this “minimalist” design, arises the need to separate big blocks of texts (markdown/commonmark) from structural information (json, CSS). Here comes the section-based format: an article file consists of multiple sections separated with special line separators.&lt;/p&gt; &lt;h1 id="section-based-files"&gt;Section-based files&lt;/h1&gt; &lt;p&gt;A Section starts with a &lt;code&gt;=&lt;/code&gt; followed by a section name (e.g., &lt;code&gt;base:main-css.css&lt;/code&gt;) and ends with an empty line followed by another section (or the end of the file).&lt;/p&gt; &lt;p&gt;For instance, a fictional file containing three sections could be&lt;/p&gt; &lt;pre&gt;&lt;code&gt;=foo.json {&amp;quot;a&amp;quot;: 123} =foobar.css @import &amp;quot;toto.css&amp;quot;; =foobar.css @import &amp;quot;titi.css&amp;quot;; html{ background: cyan }; &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In that case, the three sections would consists of one &lt;code&gt;foo.json&lt;/code&gt; with some JSON object and two &lt;code&gt;foobar.css&lt;/code&gt; with some CSS rules. We note that sections can be repeated: the section-format itself does not prescibe whether sections can appear multiple times or whether they are mandatory. It is then the role of the KitchenSink blog engine to decide whether it makes sense to have such a structure. For instance, having two paragraphs of texts makes sense, having two titles may be a stretch.&lt;/p&gt; &lt;p&gt;Alas (fortunately?) KitchenSink &lt;code&gt;foo.json&lt;/code&gt; and &lt;code&gt;foobar.css&lt;/code&gt; do not exist. Instead, this article list sections supported by KitchenSink. Modifying the KitchenSink engine to support new sections is out of scope of this article. You’ll find plenty of section-based format examples by browsing the &lt;a href="https://github.com/kitchensink-tech/kitchensink/tree/main/website-src"&gt;source-files for this very website&lt;/a&gt;, KitchenSink names section-based format with the &lt;code&gt;.cmark&lt;/code&gt; extension for convenience (because the meaty-content is written in CommonMark).&lt;/p&gt; &lt;h1 id="supported-sections"&gt;Supported sections&lt;/h1&gt; &lt;p&gt;Recall that KitchenSink is both a library and an engine. We describe here sections when using KitchenSink without tuning. While using KitchenSink as a library, it should be easy enough to add new sections or new layouts or modify subtly how Kitchen-Sink interprets some section data.&lt;/p&gt; &lt;p&gt;Thus, the following documentation is descriptive of how the default KitchenSink engine works. It is not the case that this documentation is prescriptive (i.e., you are free to modify any behavior – just avoid confusing your users that may end up reading this piece of documentation).&lt;/p&gt; &lt;h2 id="build-info-mandatory"&gt;build-info [mandatory]&lt;/h2&gt; &lt;div class="section-details"&gt; &lt;p&gt;An important section to let Kitchen-Sink know which &lt;strong&gt;layout&lt;/strong&gt; to apply. Known layouts are &lt;code&gt;article&lt;/code&gt;, &lt;code&gt;index&lt;/code&gt; (for &lt;code&gt;index.cmark&lt;/code&gt;), &lt;code&gt;glossary&lt;/code&gt; (for &lt;code&gt;glossary.cmark&lt;/code&gt;), &lt;code&gt;topics&lt;/code&gt; (for &lt;code&gt;topics.cmark&lt;/code&gt;), &lt;code&gt;application&lt;/code&gt; for JavaScript single-page apps, &lt;code&gt;gallery&lt;/code&gt; for content galleries, and &lt;code&gt;listing&lt;/code&gt; for various listings. Overall, except for index and topics, the layout of content does not change significantly besides the HTML-nesting (which then allows you to modify CSS or hijack DOM elements for single-page apps).&lt;/p&gt; &lt;p&gt;The publicationStatus is either: &lt;code&gt;Public&lt;/code&gt;, &lt;code&gt;Upcoming&lt;/code&gt;, or &lt;code&gt;Archived&lt;/code&gt;. Upcoming and Archived articles are treated slightly differently from Public articles in listing or in the home page: they are ranked lower and they do not carry a summary. A warning is also inserted on Upcoming and Archived articles.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;example&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;=base:build-info.json {&amp;quot;layout&amp;quot;:&amp;quot;article&amp;quot; ,&amp;quot;publicationStatus&amp;quot;:&amp;quot;Public&amp;quot; } &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;h2 id="preamble-mandatory"&gt;preamble [mandatory]&lt;/h2&gt; &lt;div class="section-details"&gt; &lt;p&gt;Contains bibliographical information such as the title and author of the article. Optionally, you can add some link to a representative image.&lt;/p&gt; &lt;p&gt;Titles and authors are used throughout where it makes sense.&lt;/p&gt; &lt;p&gt;You can also overload the &lt;a href="https://www.w3.org/2005/10/howto-favicon"&gt;favicon&lt;/a&gt; using the &lt;code&gt;faviconUrl&lt;/code&gt; JSON key.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;example&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;=base:preamble.json {&amp;quot;author&amp;quot;: &amp;quot;Lucas DiCioccio&amp;quot; ,&amp;quot;date&amp;quot;: &amp;quot;2022-01-30T12:00:00Z&amp;quot; ,&amp;quot;title&amp;quot;: &amp;quot;The section-based format&amp;quot; } &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;h2 id="summary-recommended"&gt;summary [recommended]&lt;/h2&gt; &lt;div class="section-details"&gt; &lt;p&gt;Some commonmark to generate a short summary about the article.&lt;/p&gt; &lt;p&gt;The summary is displayed in article listings but also in OpenGraph and Twitter summaries when people share links on various media.&lt;/p&gt; &lt;p&gt;Also use as HTML Meta header for search engines.&lt;/p&gt; &lt;p&gt;Although the summary is arbitrary CommonMark, you should avoid complexifying it too much (i.e., stick to emphasis, inlined code, and bold).&lt;/p&gt; &lt;p&gt;You should also keep it short (a few sentences).&lt;/p&gt; &lt;p&gt;&lt;strong&gt;example&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;=base:summary.cmark A small article about _something_ interesting. &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;h2 id="topics-recommended"&gt;topics [recommended]&lt;/h2&gt; &lt;div class="section-details"&gt; &lt;p&gt;Meta-information for contextualizing the article content.&lt;/p&gt; &lt;p&gt;The representative image is displayed in article listings but also in OpenGraph and Twitter summaries when people share links on various media.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;topics: for internally-generated topics labels (for visitors, and for creating series) &lt;/li&gt; &lt;li&gt;keywords: for HTML meta headers (for search engines) &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;strong&gt;example&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;=base:topic.json {&amp;quot;topics&amp;quot;:[&amp;quot;authoring articles&amp;quot;, &amp;quot;how-to&amp;quot;, &amp;quot;sections&amp;quot;] ,&amp;quot;keywords&amp;quot;:[&amp;quot;static-site generators&amp;quot;, &amp;quot;design&amp;quot;] ,&amp;quot;imageLink&amp;quot;: &amp;quot;/images/some-image.jpeg&amp;quot; } &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;h2 id="social-recommended"&gt;social [recommended]&lt;/h2&gt; &lt;div class="section-details"&gt; &lt;p&gt;Listing of social-profiles on various sites, will drive the inclusion of links and some Twitter meta headers.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;example&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;=base:social.json {&amp;quot;twitter&amp;quot;: &amp;quot;lucasdicioccio&amp;quot; ,&amp;quot;linkedin&amp;quot;: &amp;quot;lucasdicioccio&amp;quot; ,&amp;quot;github&amp;quot;: &amp;quot;lucasdicioccio&amp;quot; } &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;h2 id="main-content"&gt;main content&lt;/h2&gt; &lt;div class="section-details"&gt; &lt;p&gt;Well, sometimes you have good reason to not have some content. But these sections are where you should be spending most of your effort.&lt;/p&gt; &lt;p&gt;Sections are inserted in order under &lt;code&gt;&amp;lt;section&amp;gt;&lt;/code&gt; html tags. This fact is important when you are tuning the CSS of your articles (e.g., using CSS &lt;code&gt;nth-*&lt;/code&gt; selectors).&lt;/p&gt; &lt;p&gt;&lt;strong&gt;example&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;=base:main-content.cmark some commonmark &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;h2 id="taken-off-cmark-good-to-know"&gt;taken-off cmark [good-to-know]&lt;/h2&gt; &lt;div class="section-details"&gt; &lt;p&gt;Sometimes you really are taking notes along the way and you want to leave out some paragraph out of the generated output. For instance you wrote some paragraph but realized it’s better to keep it around for future articles only.&lt;/p&gt; &lt;p&gt;Such content is merely ignored by KitchenSink when generating the HTML for articles.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;example&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;=base:taken-off.cmark some content that will not show up in the article &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;h2 id="css-recommended"&gt;CSS [recommended]&lt;/h2&gt; &lt;div class="section-details"&gt; &lt;p&gt;Some CSS block that is inlined in the HTML header. Includes are supported via the &lt;code&gt;@import&lt;/code&gt; CSS directive (note KitchenSink doesn’t interpret the CSS, it merely defers the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/@import"&gt;import-feature in CSS&lt;/a&gt; that web browsers implement).&lt;/p&gt; &lt;p&gt;Most often you’ll &lt;code&gt;@import&lt;/code&gt; some repeated CSS for your specific layout and then tune some rules that match the generated HTML structure and CSS classes you may have added in your articles.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;example&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;=base:main-css.css @import &amp;quot;css/colors.css&amp;quot;; @import &amp;quot;css/article.css&amp;quot;; h1 { margin: auto; } &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;h2 id="commands-advanced"&gt;commands [advanced]&lt;/h2&gt; &lt;div class="section-details"&gt; &lt;p&gt;Sometimes you want to build content from an external command. For instance, you could snapshot the agenda of your favorite music band each time you generate your blog.&lt;/p&gt; &lt;p&gt;KitchenSink has minimal support for such a scheme. The feature requires to specify&lt;/p&gt; &lt;ul&gt; &lt;li&gt;a command name (e.g. &lt;code&gt;ping&lt;/code&gt;) &lt;/li&gt; &lt;li&gt;command arguments, arguments are a fixed array (e.g., &lt;code&gt;[&amp;quot;-c&amp;quot;, &amp;quot;3&amp;quot;, &amp;quot;8.8.4.4&amp;quot;]&lt;/code&gt;) &lt;/li&gt; &lt;li&gt;a target name (e.g., &lt;code&gt;latency_to_best_ip&lt;/code&gt;) &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;KitchenSink then reserves the filename &lt;code&gt;/gen/out/&amp;lt;filename.cmark&amp;gt;__&amp;lt;target name&amp;gt;&lt;/code&gt; (i.e., &lt;code&gt;/gen/out/sections.cmark__latency_to_best_ip&lt;/code&gt; if we were to add this section in this article) and will execute the command, retrieve the standard output and put it in the file content.&lt;/p&gt; &lt;p&gt;The main intended use cases are:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;to generate extra or debugging metadata (e.g., to get the git-hash of the source repository or the hostname of the machine that built the website) &lt;/li&gt; &lt;li&gt;to help writing blog articles where you want to “show some code” (which I do extensively to &lt;code&gt;cat&lt;/code&gt; some example source files rather than copying them in the source directory upfront) &lt;/li&gt; &lt;li&gt;to support funny features (e.g., take a selfie when generating the site) &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Keep in mind that you may hit portability issues when switching systems (e.g., if you build your website in some automation, the automation need to be able to execute the commands).&lt;/p&gt; &lt;p&gt;&lt;span class="emoji" data-emoji="warning"&gt;⚠️&lt;/span&gt; Yes, this section is a bit like a CGI-bin and it opens all sorts of security risks if you do not know what you are doing. In particular, do not copy-paste commands from the Internet without paying close attention. In future version of KitchenSink I’ll likely add a flag to ignore this section to reduce security risks for people who would like to run KitchenSink on external sources. At this point I assume that KitchenSink users are tech-savvy geeks.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;example&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;=generator:cmd.json {&amp;quot;cmd&amp;quot;: &amp;quot;ping&amp;quot; ,&amp;quot;args&amp;quot;: [&amp;quot;-c&amp;quot;, &amp;quot;3&amp;quot;, &amp;quot;8.8.4.4&amp;quot;] ,&amp;quot;target&amp;quot;:&amp;quot;latency_to_best_ip&amp;quot; } &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;example with datasets&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;=base:dataset.json items2 [ {&amp;quot;name&amp;quot;: &amp;quot;foo&amp;quot;} , {&amp;quot;name&amp;quot;: &amp;quot;bar&amp;quot;} , {&amp;quot;name&amp;quot;: &amp;quot;baz&amp;quot;} ] =base:dataset.json items1 [ {&amp;quot;letter&amp;quot;: &amp;quot;alpha&amp;quot;} , {&amp;quot;letter&amp;quot;: &amp;quot;beta&amp;quot;} , {&amp;quot;letter&amp;quot;: &amp;quot;gamma&amp;quot;} ] =generator:cmd.json {&amp;quot;cmd&amp;quot;: &amp;quot;jq&amp;quot; ,&amp;quot;args&amp;quot;: [&amp;quot;.&amp;quot;] ,&amp;quot;target&amp;quot;:&amp;quot;jqified-dataset&amp;quot; } &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;/section&gt;&lt;section class="main-section"&gt;&lt;h2 id="dhall-advanced"&gt;dhall [advanced]&lt;/h2&gt; &lt;div class="section-details"&gt; &lt;p&gt;There is one difficult design point when statically-generating website is when we have datasets of repeated structure (e.g., an image list with title, date, sizes, filepath, preferred corner thickness etc.) and you want to generate some content on a page in a static form. I touch on this difficult use-case in a &lt;a href="https://dicioccio.fr/dhall-section-demo.html"&gt;past article on my blog&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;In this specific case, the section consists of a &lt;a href="https://dhall-lang.org/"&gt;Dhall&lt;/a&gt; expression typed so that it returns a page content.&lt;/p&gt; &lt;p&gt;The returned object must be of &lt;code&gt;Type&lt;/code&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class="language-dhall"&gt;{ contents : Text , format : Text } &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Where &lt;code&gt;format&lt;/code&gt; is either &lt;code&gt;cmark&lt;/code&gt; or &lt;code&gt;html&lt;/code&gt; and &lt;code&gt;contents&lt;/code&gt; is formatted in the appropriate format. The return type is currently rather primitive and will likely change in the future. Changes and specifications are tracked in a &lt;a href="/sections-dhall.html"&gt;WIP-page&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;example&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;=base:main-content.dhall let map = https://prelude.dhall-lang.org/List/map let alphabet : List Text = [ &amp;quot;Applicative&amp;quot; , &amp;quot;Bisiumulation&amp;quot; , &amp;quot;Closure&amp;quot; , &amp;quot;Distributive&amp;quot; , &amp;quot;...&amp;quot; ] let toCmarkListItem = \(v : Text) -&amp;gt; &amp;quot;- ${v}&amp;quot; let cmarkContents : List Text = map Text Text toCmarkListItem alphabet in { contents = cmarkContents , format = &amp;quot;cmark&amp;quot; } &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;h2 id="glossary-experimental"&gt;glossary [experimental]&lt;/h2&gt; &lt;div class="section-details"&gt; &lt;p&gt;Whether its a TLA or some other term, you sometimes want to introduce glossary terms. KitchenSink has some support for glossary in the form of parsing a special section and turning that in a series of &lt;code&gt;dl/dt/dd&lt;/code&gt; HTML tags towards the end of the article.&lt;/p&gt; &lt;p&gt;Glossary terms should be repeated across articles and can have diverging definitions across articles. A consolidated view of glossary terms is built when the special article &lt;code&gt;glossary.cmark&lt;/code&gt; with layout type &lt;code&gt;glossary&lt;/code&gt; is present.&lt;/p&gt; &lt;p&gt;In the future we may modify the generated HTML to include some glossary-links directly in the render body of articles or add glossary terms as nodes into the sitemap.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;example&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;=base:glossary.json {&amp;quot;glossary&amp;quot;: [ {&amp;quot;term&amp;quot;: &amp;quot;KS&amp;quot;, &amp;quot;definition&amp;quot;: &amp;quot;Kitchen Sink&amp;quot;} , {&amp;quot;term&amp;quot;: &amp;quot;TLA&amp;quot;, &amp;quot;definition&amp;quot;: &amp;quot;Three-letter acroynym&amp;quot;} ] } &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;h2 id="embedded-datasets-experimental"&gt;embedded datasets [experimental]&lt;/h2&gt; &lt;div class="section-details"&gt; &lt;p&gt;Sometimes you want to ship a dataset. An option is to create one file in the Kitchen-Sink directory. However you may not want to multiply files. Rather, sometimes you just want to inline some dataset in a document.&lt;/p&gt; &lt;p&gt;Datasets are useful if you write a small JavaScript demo tool. Datasets also are useful as templating mechanisms as JSON datasets are input of Dhall and Mustache sections.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;dataset&lt;/code&gt; section addresses such needs, by generating. &lt;span class="emoji" data-emoji="warning"&gt;⚠️&lt;/span&gt; The ordering of the insertion determines the resulting filename, for instance &lt;code&gt;/raw/data/sections.cmark__&amp;lt;datasetname&amp;gt;&amp;lt;index&amp;gt;.csv&lt;/code&gt; for the first dataset in the &lt;code&gt;sections.cmark&lt;/code&gt; file. With &lt;datasetname&gt; a name given on the section marker (cf. example) and &lt;index&gt; a Kitchen-Sink chosen value (for now a numeric index but it could become a hash)&lt;/p&gt; &lt;p&gt;In the future we will likely create extra metadata information:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;computing sha256 signatures of datasets &lt;/li&gt; &lt;li&gt;inserting some &lt;code&gt;&amp;lt;meta&amp;gt;&lt;/code&gt; tags in the HTML &lt;code&gt;head&lt;/code&gt; section &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;strong&gt;example&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;=base:dataset.csv some-csv-dataset foo;bar a;42 b;51 =base:dataset.json some-json-dataset [{&amp;quot;foo&amp;quot;:&amp;quot;a&amp;quot;, &amp;quot;bar&amp;quot;: 42} ,{&amp;quot;foo&amp;quot;:&amp;quot;b&amp;quot;, &amp;quot;bar&amp;quot;: 51} ] &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;/section&gt;&lt;section class="main-section"&gt;&lt;h2 id="mustache-templates-experimental"&gt;Mustache templates [experimental]&lt;/h2&gt; &lt;div class="section-details"&gt; &lt;p&gt;A well-known templating language for substituting a few variables in text objects is the &lt;a href="http://mustache.github.io/mustache.5.html"&gt;Mustache&lt;/a&gt; template language.&lt;/p&gt; &lt;p&gt;As of today the implementation is as follows:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Evaluation occurs at Site-Loading time (i.e., once for a running blog in server mode). &lt;/li&gt; &lt;li&gt;There are no partials. &lt;/li&gt; &lt;li&gt;The value available to templates is a object-collection of available datasets. Use &lt;code&gt;{{ . }}&lt;/code&gt; to “debug” the contents. &lt;/li&gt; &lt;li&gt;The content must return &lt;code&gt;.cmark&lt;/code&gt; contents (which in turns get turned into HTML). &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;I’ll likely change all of the above (for more control) but I’ve yet to fully-form ideas about the details. In particular, I have some PHP-envy to turn server-mode KitchenSink in a light webapp framework: after all, it’s a kitchen-sink.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;example&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;=base:dataset.json users [{&amp;quot;name&amp;quot;:&amp;quot;Albert&amp;quot;, &amp;quot;color&amp;quot;: &amp;quot;darksalmon&amp;quot;} ,{&amp;quot;name&amp;quot;:&amp;quot;Barbara&amp;quot;, &amp;quot;color&amp;quot;: &amp;quot;rebeccapurple&amp;quot;} ] =base:main-content.mustache ### hello from a Mustache template {{# users }} - {{ name }} : &amp;lt;span style=&amp;quot;color: {{ color }}&amp;quot;&amp;gt;Preferred Color&amp;lt;/span&amp;gt; {{/ users }} &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;/section&gt;&lt;section class="main-section"&gt;&lt;h3 id="hello-from-a-mustache-template"&gt;hello from a Mustache template&lt;/h3&gt; &lt;ul&gt; &lt;li&gt;Albert : &lt;span style="color: darksalmon"&gt;Preferred Color&lt;/span&gt; &lt;/li&gt; &lt;li&gt;Barbara : &lt;span style="color: rebeccapurple"&gt;Preferred Color&lt;/span&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/section&gt;&lt;section class="main-section"&gt;&lt;hr /&gt; &lt;/section&gt;&lt;/div&gt;
        </content>
        <link href="https://kitchensink-tech.github.io/sections.html" rel="alternate"/>
        <summary type="text">
            Writing articles in KitchenSink requires to write text files with a specific format called the section-based authoring format. A section-based format consists of delimited sections of text. Sections either configure the page (e.g., the tile of the page) or provide _meaty content_ for readers to read. This article describes the section-based format and sections available to write articles.
        </summary>
    </entry>
    <entry>
        <id>
            https://kitchensink-tech.github.io/other-formats.html
        </id>
        <title type="text">
            Other types of files
        </title>
        <updated>
            1970-01-01T00:00:00Z
        </updated>
        <author>
            <name>
                Lucas DiCioccio
            </name>
        </author>
        <content type="html">
            &lt;div class="main-article"&gt;&lt;section class="main-section"&gt;&lt;p&gt;Besides generating content from &lt;code&gt;.cmark&lt;/code&gt; &lt;a href="/sections.html"&gt;section-based&lt;/a&gt; files, KitchenSink also copies some video and images, and knows how to call in some generators for very specific formats.&lt;/p&gt; &lt;h2 id="videos"&gt;videos&lt;/h2&gt; &lt;p&gt;KitchenSink copies &lt;code&gt;.webm&lt;/code&gt; and &lt;code&gt;.mp4&lt;/code&gt; files under &lt;code&gt;/videos&lt;/code&gt;.&lt;/p&gt; &lt;h2 id="images"&gt;images&lt;/h2&gt; &lt;p&gt;KitchenSink copies &lt;code&gt;.jpg&lt;/code&gt;, &lt;code&gt;.jpeg&lt;/code&gt;, and &lt;code&gt;.png&lt;/code&gt; files under &lt;code&gt;/images&lt;/code&gt;.&lt;/p&gt; &lt;h2 id="documents"&gt;documents&lt;/h2&gt; &lt;p&gt;KitchenSink copies &lt;code&gt;.pdf&lt;/code&gt; files under &lt;code&gt;/docs&lt;/code&gt;.&lt;/p&gt; &lt;h2 id="html"&gt;HTML&lt;/h2&gt; &lt;p&gt;KitchenSink copies &lt;code&gt;.html&lt;/code&gt; files under &lt;code&gt;/&lt;/code&gt; that is, with no prefix.&lt;/p&gt; &lt;p&gt;The main use-case is to allow porting some other website to KitchenSink, starting from some imported &lt;code&gt;.html&lt;/code&gt; Other usages could be to support things like webmaster-verification tools on Google.&lt;/p&gt; &lt;p&gt;&lt;span class="emoji" data-emoji="warning"&gt;⚠️&lt;/span&gt; there is no conflict detection yet so avoid having a &lt;code&gt;.cmark&lt;/code&gt; matching a &lt;code&gt;.html&lt;/code&gt; file or you risk inconsistencies.&lt;/p&gt; &lt;h2 id="javascript"&gt;javascript&lt;/h2&gt; &lt;p&gt;KitchenSink copies &lt;code&gt;.js&lt;/code&gt; files under &lt;code&gt;/js&lt;/code&gt;.&lt;/p&gt; &lt;h2 id="so-called-raw-files"&gt;So-called raw files&lt;/h2&gt; &lt;p&gt;KitchenSink copies &lt;code&gt;.txt&lt;/code&gt;, &lt;code&gt;.json&lt;/code&gt;, &lt;code&gt;.csv&lt;/code&gt;, and &lt;code&gt;.dhall&lt;/code&gt; files under &lt;code&gt;/raw&lt;/code&gt; &lt;strong&gt;excepts for robots.txt and kitchen-sink.json&lt;/strong&gt;. I use this feature for attaching datasets or showing a long text result (e.g., a long output of a command that is too slow to generate).&lt;/p&gt; &lt;p&gt;&lt;strong&gt;exception&lt;/strong&gt;. The file &lt;code&gt;robots.txt&lt;/code&gt; stays at the root of the output dir to meet the &lt;a href="https://en.wikipedia.org/wiki/Robots_exclusion_standard"&gt;robots exclusion standard&lt;/a&gt;.&lt;/p&gt; &lt;h2 id="graphviz-dot-files"&gt;GraphViz dot files&lt;/h2&gt; &lt;p&gt;KitchenSink calls &lt;code&gt;dot&lt;/code&gt; to generate under &lt;code&gt;/gen/images/&amp;lt;filename&amp;gt;.png&lt;/code&gt;. There is little support to control the command that KitchenSink handles. If you need more control, generate pictures aside or use a command-section.&lt;/p&gt; &lt;/section&gt;&lt;/div&gt;
        </content>
        <link href="https://kitchensink-tech.github.io/other-formats.html" rel="alternate"/>
        <summary type="text">
            There is more to a blog than just CommonMark HTML. This article explains briefly how the KitchenSink engine handles other format.
        </summary>
    </entry>
    <entry>
        <id>
            https://kitchensink-tech.github.io/features.html
        </id>
        <title type="text">
            Feature list
        </title>
        <updated>
            1970-01-01T00:00:00Z
        </updated>
        <author>
            <name>
                Lucas DiCioccio
            </name>
        </author>
        <content type="html">
            &lt;div class="main-article"&gt;&lt;section class="main-section"&gt;&lt;p&gt;Kitchen-Sink consists of two related components:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;i. a set of &lt;em&gt;libraries&lt;/em&gt; (at the time of writing, everything is packed in a single library: it’s a kitchen sink afterall) &lt;/li&gt; &lt;li&gt;ii. a default &lt;em&gt;executable&lt;/em&gt; which uses defaults from the library &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The library allows you to write a program to author websites from content thrown into a folder. The name Kitchen-Sink comes from the fact that Kitchen Sink is meant to work with a single folder having no particular organization besides filenames.&lt;/p&gt; &lt;p&gt;The executable imports the library to demonstrates and implements a blog-generator generating HTML having a default layout (for this very website for instance). Thus, as a Kitchen-Sink user you could either run the executable directly (if you want a website that looks like this one for instance) or write your own executable from the library.&lt;/p&gt; &lt;p&gt;When we refer to &lt;em&gt;the Kitchen Sink engine&lt;/em&gt; or &lt;em&gt;the blog engine&lt;/em&gt;, we thus refer to features available from the libary. As of this writing, however, I have yet to finish modularizing all these features. However, the following sections provide a listing of features with a good overall structure of what could go in which libraries.&lt;/p&gt; &lt;/section&gt;&lt;section class="main-section"&gt;&lt;h2 id="command-line-single-run-mode"&gt;command-line single-run mode&lt;/h2&gt; &lt;p&gt;The default executable can run as a one-off generator command. The intended use-case if for generating websites as part of automated pipelines. There is nothing really exciting about the command-line single-run mode.&lt;/p&gt; &lt;p&gt;Example usage with the default executable:&lt;/p&gt; &lt;p&gt;&lt;code&gt;kitchen-sink produce --srcDir website-src --outDir website-www&lt;/code&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class="language-console"&gt;Loading (LoadArticle &amp;quot;website-src/features.cmark&amp;quot;) Loading (EvalSection &amp;quot;website-src/features.cmark&amp;quot; BuildInfo Json) Loading (EvalSection &amp;quot;website-src/features.cmark&amp;quot; Preamble Json) Loading (EvalSection &amp;quot;website-src/features.cmark&amp;quot; Topic Json) Loading (EvalSection &amp;quot;website-src/features.cmark&amp;quot; Social Json) Loading (EvalSection &amp;quot;website-src/features.cmark&amp;quot; MainCss Css) Loading (EvalSection &amp;quot;website-src/features.cmark&amp;quot; Summary Cmark) Loading (EvalSection &amp;quot;website-src/features.cmark&amp;quot; MainContent Cmark) Loading (EvalSection &amp;quot;website-src/features.cmark&amp;quot; MainContent Cmark) [...] Assembling &amp;quot;website-www/features.html&amp;quot; Assembling &amp;quot;website-www/topics/modding.html&amp;quot; Assembling &amp;quot;website-www/topics/philosophy.html&amp;quot; Assembling &amp;quot;website-www/topics/sections.html&amp;quot; [...] Generating &amp;quot;website-www/json/paths.json&amp;quot; Generating &amp;quot;website-www/json/filecounts.json&amp;quot; Generating &amp;quot;website-www/json/topicsgraph.json&amp;quot; Generating &amp;quot;website-www/json/features.cmark.json&amp;quot; Generating &amp;quot;website-www/json/philosophy.cmark.json&amp;quot; [...] &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;These logs indicate that files where sourced in the &lt;code&gt;website-src&lt;/code&gt; directory, then computation occured, and finally files where output in the &lt;code&gt;website-www&lt;/code&gt; directory. You can navigate with a browser in this directory. However when authoring articles it is pretty annoying to do manual refreshes. Instead, Kitchen-Sink incorporates a server able to directly serve the same content as it generates.&lt;/p&gt; &lt;/section&gt;&lt;section class="main-section"&gt;&lt;h2 id="server-mode"&gt;server-mode&lt;/h2&gt; &lt;p&gt;One key reason for having written Kitchen-Sink is to explore things that makes my life easy. Among these: live&lt;/p&gt; &lt;h3 id="live-serving"&gt;live-serving&lt;/h3&gt; &lt;p&gt;Rather than generating all the website once, Kitchen-Sink can run an HTTP server that will directly return the results of the output targets &lt;em&gt;on the fly&lt;/em&gt;. That is, each time a web-browser navigates, the latest value for a given route is shown to the browser. This is not especially useful but can come handy.&lt;/p&gt; &lt;p&gt;Example usage with the default executable:&lt;/p&gt; &lt;p&gt;&lt;code&gt;$ kitchen-sink serve --srcDir website-src --outDir website-www --servMode SERVE --httpPort 7654&lt;/code&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class="language-console"&gt;[...] SiteReloaded (Init ()) SiteReloaded RunStart TargetRequested &amp;quot;/features.html&amp;quot; TargetBuilt &amp;quot;/features.html&amp;quot; 10079 GET /features.html Params: [(&amp;quot;server-id&amp;quot;,&amp;quot;ca231c17-35c9-4060-b4f4-c0dd574dd325&amp;quot;)] Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8 Status: 200 OK 0.029790833s TargetRequested &amp;quot;/js/search-box.js&amp;quot; TargetBuilt &amp;quot;/js/search-box.js&amp;quot; 260790 GET /js/search-box.js Accept: */* Status: 200 OK 0.000694164s &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Kitchen-Sink also supports HTTPS via TLS .pem key and certificate files.&lt;/p&gt; &lt;p&gt;&lt;code&gt;$ kitchen-sink serve --srcDir website-src --outDir website-www --servMode SERVE --httpsPort 443 --tlsCertFile &amp;lt;mycert.pem&amp;gt; --tlsKeyFile &amp;lt;key.pem&amp;gt;&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Note that if you run both HTTP and HTTPS the listening ports should differ. Plain-text (a.k.a., insecure connections) are disabled on the TLS server.&lt;/p&gt; &lt;p&gt;If you specify neither HTTP nor HTTPS the binary will load and exit immediately.&lt;/p&gt; &lt;h3 id="auto-reload"&gt;auto-reload&lt;/h3&gt; &lt;p&gt;The executable server has a special API route with a mechanism to wait for changes of source files on the file-system. We also bundle a &lt;a href="/js/autoreload.js"&gt;small JavaScript&lt;/a&gt; that subscribes to changes and reload the page on a change. This JavaScript gets injected in the layout only in dev-server mode. This setup allows to auto-reload on change.&lt;/p&gt; &lt;video width="640" height="480" controls&gt; &lt;source src="/videos/auto-reload-002-liveedit.webm" type="video/webm"&gt; &lt;source src="/videos/auto-reload-002-liveedit.mp4" type="video/mp4"&gt; &lt;/video&gt; &lt;p&gt;To use the dev-server mode, use &lt;code&gt;--servMode DEV&lt;/code&gt;. That is, the full-command to run with the default executable is:&lt;/p&gt; &lt;p&gt;&lt;code&gt;kitchen-sink serve --srcDir website-src --outDir website-www --servMode DEV --port 7654&lt;/code&gt;&lt;/p&gt; &lt;h3 id="one-time-commands"&gt;one-time commands&lt;/h3&gt; &lt;p&gt;In addition to the above auto-reload script. The default executable’s layout insert some buttons to get one-click.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;the &lt;code&gt;produce&lt;/code&gt; button will regenerate the whole HTML output &lt;/li&gt; &lt;li&gt;the &lt;code&gt;publish&lt;/code&gt; button will call the &lt;code&gt;publishScript&lt;/code&gt; command in the &lt;a href="/kitchen-sink-dot-json.html"&gt;kitchen-sink.json file&lt;/a&gt; . As a data-point, I use &lt;a href="/gen/out/features.cmark__cat-publish-script"&gt;this publish-script&lt;/a&gt; for this documentation site. &lt;/li&gt; &lt;/ul&gt; &lt;video width="640" height="480" controls&gt; &lt;source src="/videos/one-time-commands-001-produce.mp4" type="video/mp4"&gt; &lt;source src="/videos/one-time-commands-001-produce.webm" type="video/webm"&gt; &lt;/video&gt; &lt;h3 id="api-proxy-mode"&gt;API-proxy mode&lt;/h3&gt; &lt;p&gt;This feature is activated in development mode only: KitchenSink dev server will proxy calls on the &lt;code&gt;/api&lt;/code&gt; route to a web backend of your choice (configured in &lt;a href="/kitchen-sink-dot-json.html"&gt;kitchen-sink.json&lt;/a&gt;). This setup allows you to run local development of single-page-apps against an API-server running aside. A goal of this feature is to allow devs to build web-app without CORS or HTTP-routing complications (concerns that should matter in production, however). The only requirement (as of now) is that the proxified API uses the &lt;code&gt;/api&lt;/code&gt; route prefix.&lt;/p&gt; &lt;h3 id="its-just-a-webserver-library"&gt;it’s just a webserver library&lt;/h3&gt; &lt;p&gt;I’ve not really explored this avenue, but it should be possible to incorporate the webserver logic in most Haskell web-applications (e.g., your web-application could run an API and Kitchen-Sink could run some documentation pages aside).&lt;/p&gt; &lt;h3 id="server-metrics"&gt;server metrics&lt;/h3&gt; &lt;p&gt;Why not? to build the webserver-library I’ve used some set of &lt;a href="https://github.com/lucasdicioccio/prodapi"&gt;curated and bundled libraries named ProdAPI&lt;/a&gt;. Which means the server inherits a number of features; among which a number of &lt;a href="https://prometheus.io/"&gt;Prometheus counters&lt;/a&gt;. An example set of metrics is available on &lt;a href="/gen/out/features.cmark__gen-local-server-metrics.txt"&gt;this extract&lt;/a&gt;. Thus, rather than bragging how much Kitchen-Sink is fast, you get to see for yourself directly (e.g., with the &lt;code&gt;blog_fullbuild_time&lt;/code&gt; counters in the Prometheus summary). Other usages would be to track how fast you add content to articles by collecting and storing the counters. For instance, the following picture is a screenshot of a Prometheus timeseries showing the size of the article while editing this paragraph (screenshot is made using &lt;a href="https://dicioccio.fr/prometheus-monitor.html"&gt;a Firefox extension I built&lt;/a&gt;)&lt;/p&gt; &lt;p&gt;&lt;img src="/images/features-001-targetsizes-timeseries.png" alt="a timeseries graph showing the blog_targets_sizes prometheus counter" /&gt;&lt;/p&gt; &lt;/section&gt;&lt;section class="main-section"&gt;&lt;h2 id="article-authoring"&gt;article authoring&lt;/h2&gt; &lt;p&gt;Writing articles is the most important thing of a static-site generator. The &lt;a href="/philosophy.html"&gt;Kitchen-Sink Philosophy&lt;/a&gt; here is to throw everything in one file. The key, and probably somewhat unique aspect of Kitchen-Sink is to propose writing articles, tune their CSS, provide topics, add generators and so on directly in the same source file.&lt;/p&gt; &lt;h3 id="the-section-based-format"&gt;the section-based format&lt;/h3&gt; &lt;p&gt;The so-called section-based format has a &lt;a href="/sections.html"&gt;dedicated article&lt;/a&gt; to document specific mechanism. In this article we merely show-off &lt;a href="/gen/out/features.cmark__cat-features-cmark"&gt;the source for this article&lt;/a&gt; to get an impression of what writing &lt;em&gt;meaty content&lt;/em&gt; entails.&lt;/p&gt; &lt;h3 id="tunable-css-per-page"&gt;tunable CSS per page&lt;/h3&gt; &lt;p&gt;Among sections worth a “feature” label, a special section drives the inlined-CSS of individual articles. In short, each article can have its own CSS file. I found that especially useful when I need to add some rules only for a given article (e.g., alternating figure alignments) or when I want to host a single-page JavaScript-app on an article only. Thus, you should use &lt;code&gt;@import&lt;/code&gt; directives for CSS modularization and re-use across pages. You do not lose much in expressivity, a bit in performance, but you gain a lot in flexibility.&lt;/p&gt; &lt;h3 id="commonmark-as-main-input-articles"&gt;CommonMark as main input articles&lt;/h3&gt; &lt;p&gt;Writing articles is mostly done in &lt;a href="https://commonmark.org/"&gt;CommonMark&lt;/a&gt;. That is, the &lt;em&gt;meaty content&lt;/em&gt; and some advanced analyses are based on CommonMark.&lt;/p&gt; &lt;p&gt;Besides the basics for headings, links, raw-HTML, &lt;em&gt;emphasis&lt;/em&gt;, &lt;strong&gt;boldness&lt;/strong&gt;, and &lt;code&gt;code&lt;/code&gt;. A number of extensions and additional extensions are enabled.&lt;/p&gt; &lt;h4 id="emojis-eyes"&gt;emojis &lt;span class="emoji" data-emoji="eyes"&gt;👀&lt;/span&gt;&lt;/h4&gt; &lt;p&gt;Adding emojis is a way to incorporate some emotions in written-web content. The list of &lt;code&gt;:emoji-codes:&lt;/code&gt; is available &lt;a href="https://gist.github.com/rxaviers/7360908"&gt;&lt;span class="emoji" data-emoji="arrow_right"&gt;➡️&lt;/span&gt; here &lt;span class="emoji" data-emoji="arrow_left"&gt;⬅️&lt;/span&gt;&lt;/a&gt; &lt;span class="emoji" data-emoji="fire"&gt;🔥&lt;/span&gt;.&lt;/p&gt; &lt;h4 id="delimited-blocks-divs-with-attributes"&gt;delimited blocks divs with attributes&lt;/h4&gt; &lt;p&gt;Which allow to add some CSS classes, and HTML identifiers&lt;/p&gt; &lt;p&gt;For instance:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;::: {.todo #smalldiv} add something ::: &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;generates the following code&lt;/p&gt; &lt;div class="code code--highlighted"&gt;&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode"&gt;&lt;code class="sourceCode"&gt;&lt;span id="1"&gt;&lt;a href="#1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="dt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kw"&gt;div&lt;/span&gt;&lt;span class="ot"&gt; id&lt;/span&gt;&lt;span class="op"&gt;=&lt;/span&gt;&lt;span class="st"&gt;&amp;quot;smalldiv&amp;quot;&lt;/span&gt;&lt;span class="ot"&gt; class&lt;/span&gt;&lt;span class="op"&gt;=&lt;/span&gt;&lt;span class="st"&gt;&amp;quot;todo&amp;quot;&lt;/span&gt;&lt;span class="dt"&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; &lt;span id="2"&gt;&lt;a href="#2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="dt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kw"&gt;p&lt;/span&gt;&lt;span class="dt"&gt;&amp;gt;&lt;/span&gt;add something&lt;span class="dt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="kw"&gt;p&lt;/span&gt;&lt;span class="dt"&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; &lt;span id="3"&gt;&lt;a href="#3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="dt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="kw"&gt;div&lt;/span&gt;&lt;span class="dt"&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;which can then be styled in CSS.&lt;/p&gt; &lt;h4 id="syntax-highlighting-with-skylighting"&gt;syntax highlighting with &lt;code&gt;skylighting&lt;/code&gt;&lt;/h4&gt; &lt;p&gt;Code-blocks are analyzed by &lt;a href="https://github.com/jgm/skylighting"&gt;skylighting&lt;/a&gt;, which tokenize code and wraps resulting code with HTML tags having some well-defined classes for styling in CSS.&lt;/p&gt; &lt;div class="code code--highlighted"&gt;&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode"&gt;&lt;code class="sourceCode"&gt;&lt;span id="1"&gt;&lt;a href="#1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="dt"&gt;int&lt;/span&gt; main&lt;span class="op"&gt;(&lt;/span&gt;&lt;span class="dt"&gt;int&lt;/span&gt; argc&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="dt"&gt;char&lt;/span&gt;&lt;span class="op"&gt;**&lt;/span&gt; argv&lt;span class="op"&gt;)&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt;&lt;/span&gt; &lt;span id="2"&gt;&lt;a href="#2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; &lt;span class="cf"&gt;return&lt;/span&gt; &lt;span class="dv"&gt;0&lt;/span&gt;&lt;span class="op"&gt;;&lt;/span&gt;&lt;/span&gt; &lt;span id="3"&gt;&lt;a href="#3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="op"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;Overall I found that skylighting does the job and since the library requires no extra JavaScript on the resulting website or external-dependencies at code-generation time: it’s good.&lt;/p&gt; &lt;h4 id="hashtags"&gt;HashTags&lt;/h4&gt; &lt;p&gt;This extension is custom-made (until we upstream it). KitchenSinks discovers &lt;a href="/hashtags/hash-tags.html"&gt;&lt;span class="hashtag" data-hashtag="hash-tags"&gt;#hash-tags&lt;/span&gt;&lt;/a&gt; in artcicles. Such a feature enables you to turn your blog into some &lt;a href="/hashtags/note-taking.html"&gt;&lt;span class="hashtag" data-hashtag="note-taking"&gt;#note-taking&lt;/span&gt;&lt;/a&gt; apps. HashTags acts like Topics in the sense that they allow you to list all items on a special, per-HashTag page.&lt;/p&gt; &lt;h3 id="copies-other-images-css-medias"&gt;copies other images, css, medias&lt;/h3&gt; &lt;p&gt;An article often comes with extra medias. Images (with &lt;code&gt;jpeg&lt;/code&gt;, &lt;code&gt;png&lt;/code&gt; extensions), JavaScript (&lt;code&gt;.js&lt;/code&gt;) and CSS (&lt;code&gt;.css&lt;/code&gt;) files are copied to their own target at known locations. The same thing occurs for a variety of filetypes (&lt;code&gt;.mp3&lt;/code&gt;, &lt;code&gt;.mp4&lt;/code&gt; and so on). That is, KitchenSink wants everything in a directory but applies rule so that you get something a bit cleaner in return, isn’t it awesome?&lt;/p&gt; &lt;p&gt;You can see for yourself, compare the &lt;a href="/gen/out/features.cmark__tree-site-input-cmark.json"&gt;listing of this website source directory&lt;/a&gt; with the &lt;a href="/gen/out/features.cmark__tree-site-output-cmark.json"&gt;listing of the website output directory&lt;/a&gt; (courtesy of &lt;code&gt;tree -J&lt;/code&gt;).&lt;/p&gt; &lt;h3 id="generate-images-from-dot"&gt;generate images from &lt;code&gt;.dot&lt;/code&gt;&lt;/h3&gt; &lt;p&gt;There is a special room in my heart for &lt;a href="https://graphviz.org/"&gt;GraphViz&lt;/a&gt; &lt;span class="emoji" data-emoji="heart"&gt;❤️&lt;/span&gt;. I use it a lot to render diagrams and illustrate simple ideas. Thus I found natural to add some special support for files with the &lt;code&gt;.dot&lt;/code&gt; extensions.&lt;/p&gt; &lt;p&gt;&lt;img src="/gen/images/features-002-dot-demo.dot.png" alt="all in the kitchen-sink" /&gt;&lt;/p&gt; &lt;p&gt;Coupled with &lt;a href="#auto-reload"&gt;auto-reload&lt;/a&gt;, GraphViz-made diagrams work well enough to edit technical articles without ever leaving my editor as illustrated in the following video:&lt;/p&gt; &lt;video width="640" height="480" controls&gt; &lt;source src="/videos/auto-reload-001-dot.mp4" type="video/mp4"&gt; &lt;source src="/videos/auto-reload-001-dot.webm" type="video/webm"&gt; &lt;/video&gt; &lt;/section&gt;&lt;section class="main-section"&gt;&lt;h2 id="content-generation"&gt;content-generation&lt;/h2&gt; &lt;p&gt;The core-business of a static-site generator is to generate HTML output from various input. Thus, we could pedentically say that all content is “generated”. Here we discuss cases where Kitchen-Sink goes the extra-mile to provide extra features.&lt;/p&gt; &lt;h3 id="embedded-data"&gt;embedded data&lt;/h3&gt; &lt;p&gt;Kitchen-Sink generate a host of data while assembling targets from input files. Intermediary-representations. In particular, there is a &lt;code&gt;json&lt;/code&gt; file generated with each HTML article and is linked in the HTML &lt;code&gt;meta&lt;/code&gt; tag with name &lt;code&gt;ks:article_json&lt;/code&gt;. So that individual scripts can then locate these information. As we get more mileage, we’ll likely add more of such paths and formalize a bit their expected content. However, keep in mind that Kitchen-Sink generates more than just the static aspects of the HTML: it provides a bunch of extra information which can be useful for &lt;a href="#content-analysis"&gt;creative and advanced analyses&lt;/a&gt;.&lt;/p&gt; &lt;h3 id="command-based-generators"&gt;command-based generators&lt;/h3&gt; &lt;p&gt;In this article I’ve already pointed to a number of links (e.g., the source of this article, some directory listings). In short, you can add one-off data collections that produce their own targets.&lt;/p&gt; &lt;p&gt;A typical usage is to turn some information about the system generating the blog (e.g. &lt;code&gt;uname -a&lt;/code&gt;). However you could get creative such as&lt;/p&gt; &lt;ul&gt; &lt;li&gt;fetch the latest news-article &lt;/li&gt; &lt;li&gt;run some database query to be displayed in javascript later &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Less typical usage is for “personal” features like taking a selfie on demand: yes, this picture happens to be my face when I generate my &lt;a href="https://dicioccio.fr/"&gt;personal blog&lt;/a&gt; as I’ve added this section in the “about-me” page – hat tip to &lt;code&gt;fswebcam&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;=generator:cmd.json {&amp;quot;cmd&amp;quot;:&amp;quot;fswebcam&amp;quot; ,&amp;quot;args&amp;quot;:[&amp;quot;-r&amp;quot;, &amp;quot;320x240&amp;quot;, &amp;quot;--jpeg&amp;quot;, &amp;quot;85&amp;quot;, &amp;quot;-D&amp;quot;, &amp;quot;1&amp;quot;, &amp;quot;/dev/stdout&amp;quot;] ,&amp;quot;target&amp;quot;:&amp;quot;latest-selfie.jpg&amp;quot; } &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;img src="https://lucasdicioccio.github.io/gen/out/about-me.cmark__latest-selfie.jpg" alt="selfie" /&gt;&lt;/p&gt; &lt;h3 id="microscriptable-in-dhall"&gt;microscriptable in Dhall&lt;/h3&gt; &lt;p&gt;I have written a &lt;a href="https://dicioccio.fr/dhall-section-demo.html"&gt;full article&lt;/a&gt; on my personal blog a while ago to motivate the whole usage of &lt;a href="https://dhall-lang.org/"&gt;Dhall&lt;/a&gt;. Keep in mind that I’m still happy about the choice. Dhall “powers” my photo galleries and my &lt;a href="https://lucasdicioccio.github.io/notes.html"&gt;stream of notes&lt;/a&gt; on my personal blog.&lt;/p&gt; &lt;/section&gt;&lt;section class="main-section"&gt;&lt;h2 id="article-organization"&gt;article organization&lt;/h2&gt; &lt;p&gt;An article needs some &lt;em&gt;decorum&lt;/em&gt; to help readers of your site as well as other applications relaying your articles. For instance, who is the author? what topics are covered? can you summarize it for me? Kitchen-Sink has a number of features to answer such questions. Most if not all of these features are controlled by specific &lt;a href="/sections.html"&gt;sections&lt;/a&gt; in the section-based-format. Here we merely give an overview of what is feasible.&lt;/p&gt; &lt;h3 id="categories-and-series-using-topics"&gt;categories and series using topics&lt;/h3&gt; &lt;p&gt;Article can be labelled with a set of topics. Kitchen-Sink then collects all articles for a given topic under special categories and under the &lt;code&gt;/topics&lt;/code&gt; route. This is not especially innovative but I believe it’s a must have even if I suppose most readers do not really use these topics listing a lot, they are used to connect articles in the &lt;a href="#sitemap"&gt;site map&lt;/a&gt; graph.&lt;/p&gt; &lt;p&gt;Furthermore &lt;em&gt;topics double as series&lt;/em&gt; that is, a “previous/next” link show up on the article header. To follow the previous-next article within a topic.&lt;/p&gt; &lt;h3 id="article-summaries"&gt;article summaries&lt;/h3&gt; &lt;p&gt;Article have summaries. The use case for summaries is to entice readers into committing more time to read an article in full.&lt;/p&gt; &lt;p&gt;Technically, summaries are inserted in article listings. The main listing is the home-page of a blog. &lt;a href="#categories-using-topics"&gt;Categories listings&lt;/a&gt; also repeat the listings. The summary also is used in some &lt;code&gt;&amp;lt;meta&amp;gt;&lt;/code&gt; headers, in particular to provide neat summaries when people share your articles (cf. &lt;a href="#open-graph-and-twitter-card-metas"&gt;open-graph&lt;/a&gt;).&lt;/p&gt; &lt;h3 id="social-links"&gt;social links&lt;/h3&gt; &lt;p&gt;In this age of pervasive Internet, you may have accounts in a number of online social-networks. Kitchen-Sink supports some of these: list your handles and enable features (as of today: it’s only a link to your canonical profile, in the future we could imagine more interactions).&lt;/p&gt; &lt;h3 id="open-graph-and-twitter-card-metas"&gt;open-graph and twitter-card metas&lt;/h3&gt; &lt;p&gt;You’ve probably already seen how some chat-applications (e.g., Discord, Slack) and social-services (e.g., LinkedIn, Twitter) provide a preview of webpages that are linked. These previews can embed images. You need to follow some specifications to control these, and that is what Kitchen-Sink does. Indeed Kitchen-Sink generates &lt;code&gt;&amp;lt;meta&amp;gt;&lt;/code&gt; HTML headers for &lt;a href="https://ogp.me/"&gt;OpenGraph&lt;/a&gt; and &lt;a href="https://developer.twitter.com/en/docs/twitter-for-websites/cards/overview/abouts-cards"&gt;Twitter cards&lt;/a&gt;.&lt;/p&gt; &lt;h3 id="consolidated-glossary"&gt;consolidated glossary&lt;/h3&gt; &lt;p&gt;KitchenSink allows you to add glossary items to individual articles as well as &lt;a href="/glossary.html"&gt;a consolidated glossary&lt;/a&gt; where multiple definitions may coexist.&lt;/p&gt; &lt;/section&gt;&lt;section class="main-section"&gt;&lt;h2 id="content-analysis"&gt;content-analysis&lt;/h2&gt; &lt;p&gt;Whether you write individual articles or a long series of multiple articles, it is useful to have some way to summarize what you have written. For instance, you want to know whether an article is connected to other articles, you want to understand if sections are well-balanced or not.&lt;/p&gt; &lt;p&gt;All of these reasons were decisive factors when deciding to write and while &lt;a href="/design-points.html"&gt;designing&lt;/a&gt; Kitchen-Sink. I’ve merely scratched the surface of the analyses I want to make on my own writing and I hope you’ll find some of these helpful too.&lt;/p&gt; &lt;h3 id="atom-feeds"&gt;Atom feeds&lt;/h3&gt; &lt;p&gt;KitchenSink generates a &lt;a href="https://validator.w3.org/feed/docs/atom.html"&gt;Atom&lt;/a&gt; feed for the whole site at the &lt;a href="/atom.xml"&gt;/atom.xml&lt;/a&gt; path as well as one Atom feed for each of the topics listing. In short: every topic is its own Atom feed. For now only summaries in raw text format are provided.&lt;/p&gt; &lt;h3 id="sitemap"&gt;sitemap&lt;/h3&gt; &lt;p&gt;KitchenSink generates a &lt;a href="/sitemap.txt"&gt;sitemap.txt&lt;/a&gt; linking to all articles. Remember to “ping” Google afterwards by visiting &lt;code&gt;https://www.google.com/ping?sitemap=&amp;lt;your-deploy-url&amp;gt;/sitemap.txt&lt;/code&gt; (I’m not an SEO expert so I cannot really vouch for other crawlers).&lt;/p&gt; &lt;h3 id="site-listing-and-search-box"&gt;site listing and search-box&lt;/h3&gt; &lt;p&gt;Static sites lack a good user-driven search as there are no servers to answer search queries. Topics listing alleviate some of these need. Topics merely are pre-computed indexes (and Atom feeds). Thus, KitchenSink also want to pre-compute search indexes. At the moment, the search-box is primitive and only allows to search into filenames (and I use it all the time when authoring articles to find &lt;a href="/json/paths.json"&gt;links to images and generated outputs&lt;/a&gt;). However we could definitely go a step further by also searching, or displaying summaries in the search box. As people say: watch this space!&lt;/p&gt; &lt;h3 id="wordcounts-and-article-staircases"&gt;wordcounts and article staircases&lt;/h3&gt; &lt;p&gt;One key aspect of writing content for the web is to control the length of an article. While writing for a printed format (my experience is with academic publishing) the number of pages and the number of column-per-page for articles is a good indication of the size of the content. Infinitely-long pages on the web blur this signal. Thus, to rebuild some understanding of how-long an article is, we need to run word counts.&lt;/p&gt; &lt;p&gt;As a result, Kitchen-Sink compute a word count for each article (in addition to images, links counts). Even further, Kitchen-Sink computes a word-count per title-section. Which allows us to display what I call article staircases with visualization libraries (here we use &lt;a href="https://echarts.apache.org/en/index.html"&gt;Apache ECharts&lt;/a&gt;):&lt;/p&gt; &lt;div id="histogram"&gt; &lt;/div&gt; &lt;script src="/js/echarts.min.js"&gt;&lt;/script&gt; &lt;script src="/js/echart-histogram.js"&gt;&lt;/script&gt; &lt;p&gt;The above histogram shows, for each section in the article, the number of words and the cumulated number of words in the article. This histogram allows me, when writing an article, to spot which sections are abnormally-long or abnormally short. I interpret this graph to find opportunities to split or merge sections together, hopefully improving my writing for users.&lt;/p&gt; &lt;p&gt;Kitchen-Sink also computes &lt;a href="/json/filecounts.json"&gt;whole-site summaries&lt;/a&gt; although I have no great use-case yet for these.&lt;/p&gt; &lt;h3 id="sitemap-graph"&gt;sitemap graph&lt;/h3&gt; &lt;p&gt;Kitchen-Sink processes all of the above information (topics, links between pages, image lists, etc.) to populate a &lt;a href="/json/topicsgraph.json"&gt;JSON representation of a graph&lt;/a&gt; summarizing the structure of the whole site. This special target is built with the website and you can be creative with it. So far, Kitchen-Sink provides a &lt;a href="/js/topicgraph.js"&gt;PureScript compiled to JavaScript&lt;/a&gt; minimal app to turn the graph into an interactive-picture using &lt;a href="https://echarts.apache.org/en/index.html"&gt;Apache Echarts&lt;/a&gt;.&lt;/p&gt; &lt;div id="echartzone"&gt; &lt;/div&gt; &lt;script src="js/topicgraph.js"&gt;&lt;/script&gt; &lt;p&gt;A special config in &lt;a href="/kitchen-sink-dot-json.html"&gt;kitchen-sink.json&lt;/a&gt; allows to give extra importance to a &lt;em&gt;subset of&lt;/em&gt; externally linked sites. For instance a connection between this page and &lt;a href="https://en.wikipedia.org/wiki/Special:Random"&gt;a random WikiPedia article&lt;/a&gt; exists because we defined an entry for WikiPedia. Think of this feature like a revisit of the good-old webrings.&lt;/p&gt; &lt;script src="js/copy-snippets.js"&gt;&lt;/script&gt; &lt;/section&gt;&lt;/div&gt;
        </content>
        <link href="https://kitchensink-tech.github.io/features.html" rel="alternate"/>
        <summary type="text">
            This article lists the main features of Kitchen Sink. We do not really compare it to the vast amount of other static-site generators.
        </summary>
    </entry>
</feed>
