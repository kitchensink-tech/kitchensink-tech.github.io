<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title type="text">
        The Kitchen Sink Blog Generator
    </title>
    <id>
        https://kitchensink-tech.github.io/atom.xml
    </id>
    <updated>
        1970-01-01T00:00:00Z
    </updated>
    <entry>
        <id>
            https://kitchensink-tech.github.io/features.html
        </id>
        <title type="text">
            Feature list
        </title>
        <updated>
            1970-01-01T00:00:00Z
        </updated>
        <author>
            <name>
                Lucas DiCioccio
            </name>
        </author>
        <content type="html">
            &lt;div class="main-article"&gt;&lt;section class="main-section"&gt;&lt;p&gt;Kitchen-Sink consists of two related components:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;i. a set of &lt;em&gt;libraries&lt;/em&gt; (at the time of writing, everything is packed in a single library: it’s a kitchen sink afterall) &lt;/li&gt; &lt;li&gt;ii. a default &lt;em&gt;executable&lt;/em&gt; which uses defaults from the library &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The library allows you to write a program to author websites from content thrown into a folder. The name Kitchen-Sink comes from the fact that Kitchen Sink is meant to work with a single folder having no particular organization besides filenames.&lt;/p&gt; &lt;p&gt;The executable imports the library to demonstrates and implements a blog-generator generating HTML having a default layout (for this very website for instance). Thus, as a Kitchen-Sink user you could either run the executable directly (if you want a website that looks like this one for instance) or write your own executable from the library.&lt;/p&gt; &lt;p&gt;When we refer to &lt;em&gt;the Kitchen Sink engine&lt;/em&gt; or &lt;em&gt;the blog engine&lt;/em&gt;, we thus refer to features available from the libary. As of this writing, however, I have yet to finish modularizing all these features. However, the following sections provide a listing of features with a good overall structure of what could go in which libraries.&lt;/p&gt; &lt;/section&gt;&lt;section class="main-section"&gt;&lt;h2 id="command-line-single-run-mode"&gt;command-line single-run mode&lt;/h2&gt; &lt;p&gt;The default executable can run as a one-off generator command. The intended use-case if for generating websites as part of automated pipelines. There is nothing really exciting about the command-line single-run mode.&lt;/p&gt; &lt;p&gt;Example usage with the default executable:&lt;/p&gt; &lt;p&gt;&lt;code&gt;kitchen-sink produce --srcDir website-src --outDir website-www&lt;/code&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class="language-console"&gt;Loading (LoadArticle &amp;quot;website-src/features.cmark&amp;quot;) Loading (EvalSection &amp;quot;website-src/features.cmark&amp;quot; BuildInfo Json) Loading (EvalSection &amp;quot;website-src/features.cmark&amp;quot; Preamble Json) Loading (EvalSection &amp;quot;website-src/features.cmark&amp;quot; Topic Json) Loading (EvalSection &amp;quot;website-src/features.cmark&amp;quot; Social Json) Loading (EvalSection &amp;quot;website-src/features.cmark&amp;quot; MainCss Css) Loading (EvalSection &amp;quot;website-src/features.cmark&amp;quot; Summary Cmark) Loading (EvalSection &amp;quot;website-src/features.cmark&amp;quot; MainContent Cmark) Loading (EvalSection &amp;quot;website-src/features.cmark&amp;quot; MainContent Cmark) [...] Assembling &amp;quot;website-www/features.html&amp;quot; Assembling &amp;quot;website-www/topics/modding.html&amp;quot; Assembling &amp;quot;website-www/topics/philosophy.html&amp;quot; Assembling &amp;quot;website-www/topics/sections.html&amp;quot; [...] Generating &amp;quot;website-www/json/paths.json&amp;quot; Generating &amp;quot;website-www/json/filecounts.json&amp;quot; Generating &amp;quot;website-www/json/topicsgraph.json&amp;quot; Generating &amp;quot;website-www/json/features.cmark.json&amp;quot; Generating &amp;quot;website-www/json/philosophy.cmark.json&amp;quot; [...] &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;These logs indicate that files where sourced in the &lt;code&gt;website-src&lt;/code&gt; directory, then computation occured, and finally files where output in the &lt;code&gt;website-www&lt;/code&gt; directory. You can navigate with a browser in this directory. However when authoring articles it is pretty annoying to do manual refreshes. Instead, Kitchen-Sink incorporates a server able to directly serve the same content as it generates.&lt;/p&gt; &lt;/section&gt;&lt;section class="main-section"&gt;&lt;h2 id="server-mode"&gt;server-mode&lt;/h2&gt; &lt;p&gt;One key reason for having written Kitchen-Sink is to explore things that makes my life easy. Among these: live&lt;/p&gt; &lt;h3 id="live-serving"&gt;live-serving&lt;/h3&gt; &lt;p&gt;Rather than generating all the website once, Kitchen-Sink can run an HTTP server that will directly return the results of the output targets &lt;em&gt;on the fly&lt;/em&gt;. That is, each time a web-browser navigates, the latest value for a given route is shown to the browser. This is not especially useful but can come handy.&lt;/p&gt; &lt;p&gt;Example usage with the default executable:&lt;/p&gt; &lt;p&gt;&lt;code&gt;$ kitchen-sink serve --srcDir website-src --outDir website-www --servMode SERVE --httpPort 7654&lt;/code&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class="language-console"&gt;[...] SiteReloaded (Init ()) SiteReloaded RunStart TargetRequested &amp;quot;/features.html&amp;quot; TargetBuilt &amp;quot;/features.html&amp;quot; 10079 GET /features.html Params: [(&amp;quot;server-id&amp;quot;,&amp;quot;ca231c17-35c9-4060-b4f4-c0dd574dd325&amp;quot;)] Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8 Status: 200 OK 0.029790833s TargetRequested &amp;quot;/js/search-box.js&amp;quot; TargetBuilt &amp;quot;/js/search-box.js&amp;quot; 260790 GET /js/search-box.js Accept: */* Status: 200 OK 0.000694164s &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Kitchen-Sink also supports HTTPS via TLS .pem key and certificate files.&lt;/p&gt; &lt;p&gt;&lt;code&gt;$ kitchen-sink serve --srcDir website-src --outDir website-www --servMode SERVE --httpsPort 443 --tlsCertFile &amp;lt;mycert.pem&amp;gt; --tlsKeyFile &amp;lt;key.pem&amp;gt;&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Note that if you run both HTTP and HTTPS the listening ports should differ. Plain-text (a.k.a., insecure connections) are disabled on the TLS server.&lt;/p&gt; &lt;p&gt;If you specify neither HTTP nor HTTPS the binary will load and exit immediately.&lt;/p&gt; &lt;h3 id="auto-reload"&gt;auto-reload&lt;/h3&gt; &lt;p&gt;The executable server has a special API route with a mechanism to wait for changes of source files on the file-system. We also bundle a &lt;a href="/js/autoreload.js"&gt;small JavaScript&lt;/a&gt; that subscribes to changes and reload the page on a change. This JavaScript gets injected in the layout only in dev-server mode. This setup allows to auto-reload on change.&lt;/p&gt; &lt;video width="640" height="480" controls&gt; &lt;source src="/videos/auto-reload-002-liveedit.webm" type="video/webm"&gt; &lt;source src="/videos/auto-reload-002-liveedit.mp4" type="video/mp4"&gt; &lt;/video&gt; &lt;p&gt;To use the dev-server mode, use &lt;code&gt;--servMode DEV&lt;/code&gt;. That is, the full-command to run with the default executable is:&lt;/p&gt; &lt;p&gt;&lt;code&gt;kitchen-sink serve --srcDir website-src --outDir website-www --servMode DEV --port 7654&lt;/code&gt;&lt;/p&gt; &lt;h3 id="one-time-commands"&gt;one-time commands&lt;/h3&gt; &lt;p&gt;In addition to the above auto-reload script. The default executable’s layout insert some buttons to get one-click.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;the &lt;code&gt;produce&lt;/code&gt; button will regenerate the whole HTML output &lt;/li&gt; &lt;li&gt;the &lt;code&gt;publish&lt;/code&gt; button will call the &lt;code&gt;publishScript&lt;/code&gt; command in the &lt;a href="/kitchen-sink-dot-json.html"&gt;kitchen-sink.json file&lt;/a&gt; . As a data-point, I use &lt;a href="/gen/out/features.cmark__cat-publish-script"&gt;this publish-script&lt;/a&gt; for this documentation site. &lt;/li&gt; &lt;/ul&gt; &lt;video width="640" height="480" controls&gt; &lt;source src="/videos/one-time-commands-001-produce.mp4" type="video/mp4"&gt; &lt;source src="/videos/one-time-commands-001-produce.webm" type="video/webm"&gt; &lt;/video&gt; &lt;h3 id="api-proxy-mode"&gt;API-proxy mode&lt;/h3&gt; &lt;p&gt;This feature is activated in development mode only: KitchenSink dev server will proxy calls on the &lt;code&gt;/api&lt;/code&gt; route to a web backend of your choice (configured in &lt;a href="/kitchen-sink-dot-json.html"&gt;kitchen-sink.json&lt;/a&gt;). This setup allows you to run local development of single-page-apps against an API-server running aside. A goal of this feature is to allow devs to build web-app without CORS or HTTP-routing complications (concerns that should matter in production, however). The only requirement (as of now) is that the proxified API uses the &lt;code&gt;/api&lt;/code&gt; route prefix.&lt;/p&gt; &lt;h3 id="its-just-a-webserver-library"&gt;it’s just a webserver library&lt;/h3&gt; &lt;p&gt;I’ve not really explored this avenue, but it should be possible to incorporate the webserver logic in most Haskell web-applications (e.g., your web-application could run an API and Kitchen-Sink could run some documentation pages aside).&lt;/p&gt; &lt;h3 id="server-metrics"&gt;server metrics&lt;/h3&gt; &lt;p&gt;Why not? to build the webserver-library I’ve used some set of &lt;a href="https://github.com/lucasdicioccio/prodapi"&gt;curated and bundled libraries named ProdAPI&lt;/a&gt;. Which means the server inherits a number of features; among which a number of &lt;a href="https://prometheus.io/"&gt;Prometheus counters&lt;/a&gt;. An example set of metrics is available on &lt;a href="/gen/out/features.cmark__gen-local-server-metrics.txt"&gt;this extract&lt;/a&gt;. Thus, rather than bragging how much Kitchen-Sink is fast, you get to see for yourself directly (e.g., with the &lt;code&gt;blog_fullbuild_time&lt;/code&gt; counters in the Prometheus summary). Other usages would be to track how fast you add content to articles by collecting and storing the counters. For instance, the following picture is a screenshot of a Prometheus timeseries showing the size of the article while editing this paragraph (screenshot is made using &lt;a href="https://dicioccio.fr/prometheus-monitor.html"&gt;a Firefox extension I built&lt;/a&gt;)&lt;/p&gt; &lt;p&gt;&lt;img src="/images/features-001-targetsizes-timeseries.png" alt="a timeseries graph showing the blog_targets_sizes prometheus counter" /&gt;&lt;/p&gt; &lt;/section&gt;&lt;section class="main-section"&gt;&lt;h2 id="article-authoring"&gt;article authoring&lt;/h2&gt; &lt;p&gt;Writing articles is the most important thing of a static-site generator. The &lt;a href="/philosophy.html"&gt;Kitchen-Sink Philosophy&lt;/a&gt; here is to throw everything in one file. The key, and probably somewhat unique aspect of Kitchen-Sink is to propose writing articles, tune their CSS, provide topics, add generators and so on directly in the same source file.&lt;/p&gt; &lt;h3 id="the-section-based-format"&gt;the section-based format&lt;/h3&gt; &lt;p&gt;The so-called section-based format has a &lt;a href="/sections.html"&gt;dedicated article&lt;/a&gt; to document specific mechanism. In this article we merely show-off &lt;a href="/gen/out/features.cmark__cat-features-cmark"&gt;the source for this article&lt;/a&gt; to get an impression of what writing &lt;em&gt;meaty content&lt;/em&gt; entails.&lt;/p&gt; &lt;h3 id="tunable-css-per-page"&gt;tunable CSS per page&lt;/h3&gt; &lt;p&gt;Among sections worth a “feature” label, a special section drives the inlined-CSS of individual articles. In short, each article can have its own CSS file. I found that especially useful when I need to add some rules only for a given article (e.g., alternating figure alignments) or when I want to host a single-page JavaScript-app on an article only. Thus, you should use &lt;code&gt;@import&lt;/code&gt; directives for CSS modularization and re-use across pages. You do not lose much in expressivity, a bit in performance, but you gain a lot in flexibility.&lt;/p&gt; &lt;h3 id="commonmark-as-main-input-articles"&gt;CommonMark as main input articles&lt;/h3&gt; &lt;p&gt;Writing articles is mostly done in &lt;a href="https://commonmark.org/"&gt;CommonMark&lt;/a&gt;. That is, the &lt;em&gt;meaty content&lt;/em&gt; and some advanced analyses are based on CommonMark.&lt;/p&gt; &lt;p&gt;Besides the basics for headings, links, raw-HTML, &lt;em&gt;emphasis&lt;/em&gt;, &lt;strong&gt;boldness&lt;/strong&gt;, and &lt;code&gt;code&lt;/code&gt;. A number of extensions and additional extensions are enabled.&lt;/p&gt; &lt;h4 id="emojis-eyes"&gt;emojis &lt;span class="emoji" data-emoji="eyes"&gt;👀&lt;/span&gt;&lt;/h4&gt; &lt;p&gt;Adding emojis is a way to incorporate some emotions in written-web content. The list of &lt;code&gt;:emoji-codes:&lt;/code&gt; is available &lt;a href="https://gist.github.com/rxaviers/7360908"&gt;&lt;span class="emoji" data-emoji="arrow_right"&gt;➡️&lt;/span&gt; here &lt;span class="emoji" data-emoji="arrow_left"&gt;⬅️&lt;/span&gt;&lt;/a&gt; &lt;span class="emoji" data-emoji="fire"&gt;🔥&lt;/span&gt;.&lt;/p&gt; &lt;h4 id="delimited-blocks-divs-with-attributes"&gt;delimited blocks divs with attributes&lt;/h4&gt; &lt;p&gt;Which allow to add some CSS classes, and HTML identifiers&lt;/p&gt; &lt;p&gt;For instance:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;::: {.todo #smalldiv} add something ::: &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;generates the following code&lt;/p&gt; &lt;div class="code code--highlighted"&gt;&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode"&gt;&lt;code class="sourceCode"&gt;&lt;span id="1"&gt;&lt;a href="#1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="dt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kw"&gt;div&lt;/span&gt;&lt;span class="ot"&gt; id&lt;/span&gt;&lt;span class="op"&gt;=&lt;/span&gt;&lt;span class="st"&gt;&amp;quot;smalldiv&amp;quot;&lt;/span&gt;&lt;span class="ot"&gt; class&lt;/span&gt;&lt;span class="op"&gt;=&lt;/span&gt;&lt;span class="st"&gt;&amp;quot;todo&amp;quot;&lt;/span&gt;&lt;span class="dt"&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; &lt;span id="2"&gt;&lt;a href="#2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="dt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kw"&gt;p&lt;/span&gt;&lt;span class="dt"&gt;&amp;gt;&lt;/span&gt;add something&lt;span class="dt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="kw"&gt;p&lt;/span&gt;&lt;span class="dt"&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; &lt;span id="3"&gt;&lt;a href="#3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="dt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="kw"&gt;div&lt;/span&gt;&lt;span class="dt"&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;which can then be styled in CSS.&lt;/p&gt; &lt;h4 id="syntax-highlighting-with-skylighting"&gt;syntax highlighting with &lt;code&gt;skylighting&lt;/code&gt;&lt;/h4&gt; &lt;p&gt;Code-blocks are analyzed by &lt;a href="https://github.com/jgm/skylighting"&gt;skylighting&lt;/a&gt;, which tokenize code and wraps resulting code with HTML tags having some well-defined classes for styling in CSS.&lt;/p&gt; &lt;div class="code code--highlighted"&gt;&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode"&gt;&lt;code class="sourceCode"&gt;&lt;span id="1"&gt;&lt;a href="#1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="dt"&gt;int&lt;/span&gt; main&lt;span class="op"&gt;(&lt;/span&gt;&lt;span class="dt"&gt;int&lt;/span&gt; argc&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="dt"&gt;char&lt;/span&gt;&lt;span class="op"&gt;**&lt;/span&gt; argv&lt;span class="op"&gt;)&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt;&lt;/span&gt; &lt;span id="2"&gt;&lt;a href="#2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; &lt;span class="cf"&gt;return&lt;/span&gt; &lt;span class="dv"&gt;0&lt;/span&gt;&lt;span class="op"&gt;;&lt;/span&gt;&lt;/span&gt; &lt;span id="3"&gt;&lt;a href="#3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="op"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;Overall I found that skylighting does the job and since the library requires no extra JavaScript on the resulting website or external-dependencies at code-generation time: it’s good.&lt;/p&gt; &lt;h4 id="hashtags"&gt;HashTags&lt;/h4&gt; &lt;p&gt;This extension is custom-made (until we upstream it). KitchenSinks discovers &lt;a href="/hashtags/hash-tags.html"&gt;&lt;span class="hashtag" data-hashtag="hash-tags"&gt;#hash-tags&lt;/span&gt;&lt;/a&gt; in artcicles. Such a feature enables you to turn your blog into some &lt;a href="/hashtags/note-taking.html"&gt;&lt;span class="hashtag" data-hashtag="note-taking"&gt;#note-taking&lt;/span&gt;&lt;/a&gt; apps. HashTags acts like Topics in the sense that they allow you to list all items on a special, per-HashTag page.&lt;/p&gt; &lt;h3 id="copies-other-images-css-medias"&gt;copies other images, css, medias&lt;/h3&gt; &lt;p&gt;An article often comes with extra medias. Images (with &lt;code&gt;jpeg&lt;/code&gt;, &lt;code&gt;png&lt;/code&gt; extensions), JavaScript (&lt;code&gt;.js&lt;/code&gt;) and CSS (&lt;code&gt;.css&lt;/code&gt;) files are copied to their own target at known locations. The same thing occurs for a variety of filetypes (&lt;code&gt;.mp3&lt;/code&gt;, &lt;code&gt;.mp4&lt;/code&gt; and so on). That is, KitchenSink wants everything in a directory but applies rule so that you get something a bit cleaner in return, isn’t it awesome?&lt;/p&gt; &lt;p&gt;You can see for yourself, compare the &lt;a href="/gen/out/features.cmark__tree-site-input-cmark.json"&gt;listing of this website source directory&lt;/a&gt; with the &lt;a href="/gen/out/features.cmark__tree-site-output-cmark.json"&gt;listing of the website output directory&lt;/a&gt; (courtesy of &lt;code&gt;tree -J&lt;/code&gt;).&lt;/p&gt; &lt;h3 id="generate-images-from-dot"&gt;generate images from &lt;code&gt;.dot&lt;/code&gt;&lt;/h3&gt; &lt;p&gt;There is a special room in my heart for &lt;a href="https://graphviz.org/"&gt;GraphViz&lt;/a&gt; &lt;span class="emoji" data-emoji="heart"&gt;❤️&lt;/span&gt;. I use it a lot to render diagrams and illustrate simple ideas. Thus I found natural to add some special support for files with the &lt;code&gt;.dot&lt;/code&gt; extensions.&lt;/p&gt; &lt;p&gt;&lt;img src="/gen/images/features-002-dot-demo.dot.png" alt="all in the kitchen-sink" /&gt;&lt;/p&gt; &lt;p&gt;Coupled with &lt;a href="#auto-reload"&gt;auto-reload&lt;/a&gt;, GraphViz-made diagrams work well enough to edit technical articles without ever leaving my editor as illustrated in the following video:&lt;/p&gt; &lt;video width="640" height="480" controls&gt; &lt;source src="/videos/auto-reload-001-dot.mp4" type="video/mp4"&gt; &lt;source src="/videos/auto-reload-001-dot.webm" type="video/webm"&gt; &lt;/video&gt; &lt;/section&gt;&lt;section class="main-section"&gt;&lt;h2 id="content-generation"&gt;content-generation&lt;/h2&gt; &lt;p&gt;The core-business of a static-site generator is to generate HTML output from various input. Thus, we could pedentically say that all content is “generated”. Here we discuss cases where Kitchen-Sink goes the extra-mile to provide extra features.&lt;/p&gt; &lt;h3 id="embedded-data"&gt;embedded data&lt;/h3&gt; &lt;p&gt;Kitchen-Sink generate a host of data while assembling targets from input files. Intermediary-representations. In particular, there is a &lt;code&gt;json&lt;/code&gt; file generated with each HTML article and is linked in the HTML &lt;code&gt;meta&lt;/code&gt; tag with name &lt;code&gt;ks:article_json&lt;/code&gt;. So that individual scripts can then locate these information. As we get more mileage, we’ll likely add more of such paths and formalize a bit their expected content. However, keep in mind that Kitchen-Sink generates more than just the static aspects of the HTML: it provides a bunch of extra information which can be useful for &lt;a href="#content-analysis"&gt;creative and advanced analyses&lt;/a&gt;.&lt;/p&gt; &lt;h3 id="command-based-generators"&gt;command-based generators&lt;/h3&gt; &lt;p&gt;In this article I’ve already pointed to a number of links (e.g., the source of this article, some directory listings). In short, you can add one-off data collections that produce their own targets.&lt;/p&gt; &lt;p&gt;A typical usage is to turn some information about the system generating the blog (e.g. &lt;code&gt;uname -a&lt;/code&gt;). However you could get creative such as&lt;/p&gt; &lt;ul&gt; &lt;li&gt;fetch the latest news-article &lt;/li&gt; &lt;li&gt;run some database query to be displayed in javascript later &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Less typical usage is for “personal” features like taking a selfie on demand: yes, this picture happens to be my face when I generate my &lt;a href="https://dicioccio.fr/"&gt;personal blog&lt;/a&gt; as I’ve added this section in the “about-me” page – hat tip to &lt;code&gt;fswebcam&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;=generator:cmd.json {&amp;quot;cmd&amp;quot;:&amp;quot;fswebcam&amp;quot; ,&amp;quot;args&amp;quot;:[&amp;quot;-r&amp;quot;, &amp;quot;320x240&amp;quot;, &amp;quot;--jpeg&amp;quot;, &amp;quot;85&amp;quot;, &amp;quot;-D&amp;quot;, &amp;quot;1&amp;quot;, &amp;quot;/dev/stdout&amp;quot;] ,&amp;quot;target&amp;quot;:&amp;quot;latest-selfie.jpg&amp;quot; } &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;img src="https://lucasdicioccio.github.io/gen/out/about-me.cmark__latest-selfie.jpg" alt="selfie" /&gt;&lt;/p&gt; &lt;h3 id="microscriptable-in-dhall"&gt;microscriptable in Dhall&lt;/h3&gt; &lt;p&gt;I have written a &lt;a href="https://dicioccio.fr/dhall-section-demo.html"&gt;full article&lt;/a&gt; on my personal blog a while ago to motivate the whole usage of &lt;a href="https://dhall-lang.org/"&gt;Dhall&lt;/a&gt;. Keep in mind that I’m still happy about the choice. Dhall “powers” my photo galleries and my &lt;a href="https://lucasdicioccio.github.io/notes.html"&gt;stream of notes&lt;/a&gt; on my personal blog.&lt;/p&gt; &lt;/section&gt;&lt;section class="main-section"&gt;&lt;h2 id="article-organization"&gt;article organization&lt;/h2&gt; &lt;p&gt;An article needs some &lt;em&gt;decorum&lt;/em&gt; to help readers of your site as well as other applications relaying your articles. For instance, who is the author? what topics are covered? can you summarize it for me? Kitchen-Sink has a number of features to answer such questions. Most if not all of these features are controlled by specific &lt;a href="/sections.html"&gt;sections&lt;/a&gt; in the section-based-format. Here we merely give an overview of what is feasible.&lt;/p&gt; &lt;h3 id="categories-and-series-using-topics"&gt;categories and series using topics&lt;/h3&gt; &lt;p&gt;Article can be labelled with a set of topics. Kitchen-Sink then collects all articles for a given topic under special categories and under the &lt;code&gt;/topics&lt;/code&gt; route. This is not especially innovative but I believe it’s a must have even if I suppose most readers do not really use these topics listing a lot, they are used to connect articles in the &lt;a href="#sitemap"&gt;site map&lt;/a&gt; graph.&lt;/p&gt; &lt;p&gt;Furthermore &lt;em&gt;topics double as series&lt;/em&gt; that is, a “previous/next” link show up on the article header. To follow the previous-next article within a topic.&lt;/p&gt; &lt;h3 id="article-summaries"&gt;article summaries&lt;/h3&gt; &lt;p&gt;Article have summaries. The use case for summaries is to entice readers into committing more time to read an article in full.&lt;/p&gt; &lt;p&gt;Technically, summaries are inserted in article listings. The main listing is the home-page of a blog. &lt;a href="#categories-using-topics"&gt;Categories listings&lt;/a&gt; also repeat the listings. The summary also is used in some &lt;code&gt;&amp;lt;meta&amp;gt;&lt;/code&gt; headers, in particular to provide neat summaries when people share your articles (cf. &lt;a href="#open-graph-and-twitter-card-metas"&gt;open-graph&lt;/a&gt;).&lt;/p&gt; &lt;h3 id="social-links"&gt;social links&lt;/h3&gt; &lt;p&gt;In this age of pervasive Internet, you may have accounts in a number of online social-networks. Kitchen-Sink supports some of these: list your handles and enable features (as of today: it’s only a link to your canonical profile, in the future we could imagine more interactions).&lt;/p&gt; &lt;h3 id="open-graph-and-twitter-card-metas"&gt;open-graph and twitter-card metas&lt;/h3&gt; &lt;p&gt;You’ve probably already seen how some chat-applications (e.g., Discord, Slack) and social-services (e.g., LinkedIn, Twitter) provide a preview of webpages that are linked. These previews can embed images. You need to follow some specifications to control these, and that is what Kitchen-Sink does. Indeed Kitchen-Sink generates &lt;code&gt;&amp;lt;meta&amp;gt;&lt;/code&gt; HTML headers for &lt;a href="https://ogp.me/"&gt;OpenGraph&lt;/a&gt; and &lt;a href="https://developer.twitter.com/en/docs/twitter-for-websites/cards/overview/abouts-cards"&gt;Twitter cards&lt;/a&gt;.&lt;/p&gt; &lt;h3 id="consolidated-glossary"&gt;consolidated glossary&lt;/h3&gt; &lt;p&gt;KitchenSink allows you to add glossary items to individual articles as well as &lt;a href="/glossary.html"&gt;a consolidated glossary&lt;/a&gt; where multiple definitions may coexist.&lt;/p&gt; &lt;/section&gt;&lt;section class="main-section"&gt;&lt;h2 id="content-analysis"&gt;content-analysis&lt;/h2&gt; &lt;p&gt;Whether you write individual articles or a long series of multiple articles, it is useful to have some way to summarize what you have written. For instance, you want to know whether an article is connected to other articles, you want to understand if sections are well-balanced or not.&lt;/p&gt; &lt;p&gt;All of these reasons were decisive factors when deciding to write and while &lt;a href="/design-points.html"&gt;designing&lt;/a&gt; Kitchen-Sink. I’ve merely scratched the surface of the analyses I want to make on my own writing and I hope you’ll find some of these helpful too.&lt;/p&gt; &lt;h3 id="atom-feeds"&gt;Atom feeds&lt;/h3&gt; &lt;p&gt;KitchenSink generates a &lt;a href="https://validator.w3.org/feed/docs/atom.html"&gt;Atom&lt;/a&gt; feed for the whole site at the &lt;a href="/atom.xml"&gt;/atom.xml&lt;/a&gt; path as well as one Atom feed for each of the topics listing. In short: every topic is its own Atom feed. For now only summaries in raw text format are provided.&lt;/p&gt; &lt;h3 id="sitemap"&gt;sitemap&lt;/h3&gt; &lt;p&gt;KitchenSink generates a &lt;a href="/sitemap.txt"&gt;sitemap.txt&lt;/a&gt; linking to all articles. Remember to “ping” Google afterwards by visiting &lt;code&gt;https://www.google.com/ping?sitemap=&amp;lt;your-deploy-url&amp;gt;/sitemap.txt&lt;/code&gt; (I’m not an SEO expert so I cannot really vouch for other crawlers).&lt;/p&gt; &lt;h3 id="site-listing-and-search-box"&gt;site listing and search-box&lt;/h3&gt; &lt;p&gt;Static sites lack a good user-driven search as there are no servers to answer search queries. Topics listing alleviate some of these need. Topics merely are pre-computed indexes (and Atom feeds). Thus, KitchenSink also want to pre-compute search indexes. At the moment, the search-box is primitive and only allows to search into filenames (and I use it all the time when authoring articles to find &lt;a href="/json/paths.json"&gt;links to images and generated outputs&lt;/a&gt;). However we could definitely go a step further by also searching, or displaying summaries in the search box. As people say: watch this space!&lt;/p&gt; &lt;h3 id="wordcounts-and-article-staircases"&gt;wordcounts and article staircases&lt;/h3&gt; &lt;p&gt;One key aspect of writing content for the web is to control the length of an article. While writing for a printed format (my experience is with academic publishing) the number of pages and the number of column-per-page for articles is a good indication of the size of the content. Infinitely-long pages on the web blur this signal. Thus, to rebuild some understanding of how-long an article is, we need to run word counts.&lt;/p&gt; &lt;p&gt;As a result, Kitchen-Sink compute a word count for each article (in addition to images, links counts). Even further, Kitchen-Sink computes a word-count per title-section. Which allows us to display what I call article staircases with visualization libraries (here we use &lt;a href="https://echarts.apache.org/en/index.html"&gt;Apache ECharts&lt;/a&gt;):&lt;/p&gt; &lt;div id="histogram"&gt; &lt;/div&gt; &lt;script src="/js/echarts.min.js"&gt;&lt;/script&gt; &lt;script src="/js/echart-histogram.js"&gt;&lt;/script&gt; &lt;p&gt;The above histogram shows, for each section in the article, the number of words and the cumulated number of words in the article. This histogram allows me, when writing an article, to spot which sections are abnormally-long or abnormally short. I interpret this graph to find opportunities to split or merge sections together, hopefully improving my writing for users.&lt;/p&gt; &lt;p&gt;Kitchen-Sink also computes &lt;a href="/json/filecounts.json"&gt;whole-site summaries&lt;/a&gt; although I have no great use-case yet for these.&lt;/p&gt; &lt;h3 id="sitemap-graph"&gt;sitemap graph&lt;/h3&gt; &lt;p&gt;Kitchen-Sink processes all of the above information (topics, links between pages, image lists, etc.) to populate a &lt;a href="/json/topicsgraph.json"&gt;JSON representation of a graph&lt;/a&gt; summarizing the structure of the whole site. This special target is built with the website and you can be creative with it. So far, Kitchen-Sink provides a &lt;a href="/js/topicgraph.js"&gt;PureScript compiled to JavaScript&lt;/a&gt; minimal app to turn the graph into an interactive-picture using &lt;a href="https://echarts.apache.org/en/index.html"&gt;Apache Echarts&lt;/a&gt;.&lt;/p&gt; &lt;div id="echartzone"&gt; &lt;/div&gt; &lt;script src="js/topicgraph.js"&gt;&lt;/script&gt; &lt;p&gt;A special config in &lt;a href="/kitchen-sink-dot-json.html"&gt;kitchen-sink.json&lt;/a&gt; allows to give extra importance to a &lt;em&gt;subset of&lt;/em&gt; externally linked sites. For instance a connection between this page and &lt;a href="https://en.wikipedia.org/wiki/Special:Random"&gt;a random WikiPedia article&lt;/a&gt; exists because we defined an entry for WikiPedia. Think of this feature like a revisit of the good-old webrings.&lt;/p&gt; &lt;script src="js/copy-snippets.js"&gt;&lt;/script&gt; &lt;/section&gt;&lt;/div&gt;
        </content>
        <link href="https://kitchensink-tech.github.io/features.html" rel="alternate"/>
        <summary type="text">
            This article lists the main features of Kitchen Sink. We do not really compare it to the vast amount of other static-site generators.
        </summary>
    </entry>
    <entry>
        <id>
            https://kitchensink-tech.github.io/philosophy.html
        </id>
        <title type="text">
            The Kitchen Sink philosophy
        </title>
        <updated>
            1970-01-01T00:00:00Z
        </updated>
        <author>
            <name>
                Lucas DiCioccio
            </name>
        </author>
        <content type="html">
            &lt;div class="main-article"&gt;&lt;section class="main-section"&gt;&lt;p&gt;In these pages, I sometimes use “&lt;strong&gt;It’s a kitchen-sink!&lt;/strong&gt;” as a placeholder for apologetic or unapologetic statements regarding the lack of sophistication of Kitchen-Sink. I lament when something is suboptimal but ought to be improved. I duck out when something is suboptimal but ought to be left out scope. Let me explain the three Kitchen-Sink tenets.&lt;/p&gt; &lt;h1 id="the-kitchen-sink-tenets"&gt;The Kitchen-Sink tenets&lt;/h1&gt; &lt;p&gt;The name of the blog-engine is not just a pun about where just dumping files in a directory to make a blog. There’s some philosophy behind the name, a philosophy that I grew out of experience: a mix of frivolity, defeatism, and awe – applied to small static sites and blogs.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Frivolity&lt;/strong&gt;. When you are too lazy to wash and sort plates, you drop them in the kitchen sink. You’ll come back later. In short, &lt;em&gt;take it easy&lt;/em&gt;. The world is tough enough to add extra-high expectation onto oneself. Blogging should be the similarly lightweight. Unless you want to make a career out of blogging, you should be frivolous about your online site.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Defeatism&lt;/strong&gt;. Humans often fall in for the same traps. Rather than doing something, we find roundabout ways for not doing them. A sure-fire way for engineers to lose time is while trying to organize things in large hierarchies and inter-connected ontologies … when there is alomost no content to organize. Blogging is the primary use-case for Kitchen-sink. In this context, I feel afraid that people spend time organizing and preparing a blog but then write no articles. Rather, I think the key value of blogs is in having content from people voicing their unique opinions. If it’s only in text files with no colors, then so be it.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Awe&lt;/strong&gt;. I have a huge amount of respect for scrapy and low-tech solutions providing outsized results. Such solutions typically &lt;em&gt;do not scale&lt;/em&gt; and require engineering to step up in intrisinc (or perceived) quality. When asked to grow a low-tech solution into some more professional service, engineers tend to codify processes and invent complex hierarchies before having any content to arrange (cf. the above point on defeatism). When approaching the world with a frivolous mindset, a tool that only works for the easy-mode will feel awesome because these easy problems will be the ones you’ll encounter most of the time. Regarding blogging this tenet means that the world improves when articles are written, even if these articles lack perfection.&lt;/p&gt; &lt;h1 id="implications-of-the-kitchen-sink-tenets-regarding-the-blog-engine"&gt;Implications of the Kitchen Sink tenets regarding the blog engine&lt;/h1&gt; &lt;p&gt;There are a few implications and many possible misunderstanding regarding the tenets. In particular being &lt;em&gt;frivolous&lt;/em&gt; and in &lt;em&gt;awe&lt;/em&gt; of scrapy solutions looks like being in opposition with “professional”.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Organization-wise&lt;/strong&gt;. Kitchen-Sink is not a good fit if you have strong opinions about hierarchies of information. Rather, the modus-operandi is: thinking about writing something? throw it into the Kitchen Sink. Where do we put source files? in the Kitchen-Sink; where do we put CSS files? in the Kitchen-Sink; where do we save images? in the Kitchen-Sink. If someone looks for what you have written: they can look in the Kitchen Sink. If people do not find what they are looking for, then only it may become interesting to add extra structure. You may even want to grow out of Kitchen-Sink and it’s fine. The Kitchen-Sink philosophy will help you with that because you won’t have annoying problems like file conflict names to start with. In short, throw things in the Kitchen Sink, it’s easy to remove them from here anyway.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Project-wise.&lt;/strong&gt; I think that there is a distinction between honest but hard-to-swallow feedback and contempt or guardkeeping. Thus, when someone approaches Kitchen-Sink saying it is inadequate for their use case: good. When someone says the whole project is a waste of time because they already have a wash basin: not good. If we regard time as a scarce resource, then adding content to a site is a budget-allocation game where the time-budget is small. I can honestly say I’ve lost so much time on &lt;em&gt;modern&lt;/em&gt; or &lt;em&gt;flexible&lt;/em&gt; or &lt;em&gt;$marketing-term&lt;/em&gt; tools. I believe a number of websites would benefit from having fewer features of the modern web and more content instead. I think the web would be better with more ugly websites having great content over pretty content-farmed websites. Markdown is awesome but you would prefer something else and do not want to contribute it? well, even though Kitchen-Sink could support new formats we’re not chasing features, we’re chasing content.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Technically.&lt;/strong&gt; Being frivolous and in awe of scrapy solutions does not mean that Kitchen-Sink should be irritating to use. Usability and correctness are a concern, otherwise some &lt;a href="/features.html"&gt;features&lt;/a&gt; like live-reload and the section-based format would not exist. Correctness may suffer a bit when things lack a good definition or inconsequential (e.g., the word-count not taking into account titles in the sections they start – feature or bug, I cannot tell, but definitely not a huge deal).&lt;/p&gt; &lt;/section&gt;&lt;/div&gt;
        </content>
        <link href="https://kitchensink-tech.github.io/philosophy.html" rel="alternate"/>
        <summary type="text">
            In these pages, I sometimes use "__It's a kitchen-sink!__" as a placeholder for apologetic or unapologetic statements regarding the lack of sophistication of Kitchen-Sink. This article positions a few tenents for Kitchen-Sink, and hopefully helps you get a feel the experience we want to build around this software.
        </summary>
    </entry>
    <entry>
        <id>
            https://kitchensink-tech.github.io/other-formats.html
        </id>
        <title type="text">
            Other types of files
        </title>
        <updated>
            1970-01-01T00:00:00Z
        </updated>
        <author>
            <name>
                Lucas DiCioccio
            </name>
        </author>
        <content type="html">
            &lt;div class="main-article"&gt;&lt;section class="main-section"&gt;&lt;p&gt;Besides generating content from &lt;code&gt;.cmark&lt;/code&gt; &lt;a href="/sections.html"&gt;section-based&lt;/a&gt; files, KitchenSink also copies some video and images, and knows how to call in some generators for very specific formats.&lt;/p&gt; &lt;h2 id="videos"&gt;videos&lt;/h2&gt; &lt;p&gt;KitchenSink copies &lt;code&gt;.webm&lt;/code&gt; and &lt;code&gt;.mp4&lt;/code&gt; files under &lt;code&gt;/videos&lt;/code&gt;.&lt;/p&gt; &lt;h2 id="sounds"&gt;sounds&lt;/h2&gt; &lt;p&gt;KitchenSink copies &lt;code&gt;.ogg&lt;/code&gt;, &lt;code&gt;flac&lt;/code&gt;, &lt;code&gt;.wav&lt;/code&gt;, &lt;code&gt;.midi&lt;/code&gt;, and &lt;code&gt;.mp3&lt;/code&gt; files under &lt;code&gt;/videos&lt;/code&gt;.&lt;/p&gt; &lt;h2 id="images"&gt;images&lt;/h2&gt; &lt;p&gt;KitchenSink copies &lt;code&gt;.jpg&lt;/code&gt;, &lt;code&gt;.jpeg&lt;/code&gt;, and &lt;code&gt;.png&lt;/code&gt; files under &lt;code&gt;/images&lt;/code&gt;.&lt;/p&gt; &lt;h2 id="documents"&gt;documents&lt;/h2&gt; &lt;p&gt;KitchenSink copies &lt;code&gt;.pdf&lt;/code&gt; files under &lt;code&gt;/docs&lt;/code&gt;.&lt;/p&gt; &lt;h2 id="html"&gt;HTML&lt;/h2&gt; &lt;p&gt;KitchenSink copies &lt;code&gt;.html&lt;/code&gt; files under &lt;code&gt;/&lt;/code&gt; that is, with no prefix.&lt;/p&gt; &lt;p&gt;The main use-case is to allow porting some other website to KitchenSink, starting from some imported &lt;code&gt;.html&lt;/code&gt; Other usages could be to support things like webmaster-verification tools on Google.&lt;/p&gt; &lt;p&gt;&lt;span class="emoji" data-emoji="warning"&gt;⚠️&lt;/span&gt; there is no conflict detection yet so avoid having a &lt;code&gt;.cmark&lt;/code&gt; matching a &lt;code&gt;.html&lt;/code&gt; file or you risk inconsistencies.&lt;/p&gt; &lt;h2 id="javascript"&gt;javascript&lt;/h2&gt; &lt;p&gt;KitchenSink copies &lt;code&gt;.js&lt;/code&gt; files under &lt;code&gt;/js&lt;/code&gt;.&lt;/p&gt; &lt;h2 id="so-called-raw-files"&gt;So-called raw files&lt;/h2&gt; &lt;p&gt;KitchenSink copies &lt;code&gt;.txt&lt;/code&gt;, &lt;code&gt;.json&lt;/code&gt;, &lt;code&gt;.csv&lt;/code&gt;, and &lt;code&gt;.dhall&lt;/code&gt; files under &lt;code&gt;/raw&lt;/code&gt; &lt;strong&gt;excepts for robots.txt and kitchen-sink.json&lt;/strong&gt;. I use this feature for attaching datasets or showing a long text result (e.g., a long output of a command that is too slow to generate).&lt;/p&gt; &lt;p&gt;&lt;strong&gt;exception&lt;/strong&gt;. The file &lt;code&gt;robots.txt&lt;/code&gt; stays at the root of the output dir to meet the &lt;a href="https://en.wikipedia.org/wiki/Robots_exclusion_standard"&gt;robots exclusion standard&lt;/a&gt;.&lt;/p&gt; &lt;h2 id="graphviz-dot-files"&gt;GraphViz dot files&lt;/h2&gt; &lt;p&gt;KitchenSink calls &lt;code&gt;dot&lt;/code&gt; to generate under &lt;code&gt;/gen/images/&amp;lt;filename&amp;gt;.png&lt;/code&gt;. There is little support to control the command that KitchenSink handles. If you need more control, generate pictures aside or use a command-section.&lt;/p&gt; &lt;/section&gt;&lt;/div&gt;
        </content>
        <link href="https://kitchensink-tech.github.io/other-formats.html" rel="alternate"/>
        <summary type="text">
            There is more to a blog than just CommonMark HTML. This article explains briefly how the KitchenSink engine handles other format.
        </summary>
    </entry>
    <entry>
        <id>
            https://kitchensink-tech.github.io/sections.html
        </id>
        <title type="text">
            The section-based format
        </title>
        <updated>
            1970-01-01T00:00:00Z
        </updated>
        <author>
            <name>
                Lucas DiCioccio
            </name>
        </author>
        <content type="html">
            &lt;div class="main-article"&gt;&lt;section class="main-section"&gt;&lt;p&gt;In my &lt;a href="https://dicioccio.fr/how-this-blog-works.html"&gt;first article about why I wrote my own blog-engine&lt;/a&gt;, I introduce an important separation between content and structure of articles. In short, the &lt;em&gt;meaty content&lt;/em&gt; is what readers are interested in, whereas structure is what readers navigate. You need both meaty content and some structure to make an article. However, you do not want to alternate switching between the two to &lt;a href="https://en.wikipedia.org/wiki/Flow_(psychology)"&gt;protect your state of flow&lt;/a&gt; while writing.&lt;/p&gt; &lt;p&gt;I grew the section-based format out of frustration using blogs that require templates with partials and special directory listings: I always felt like the added structure did not bring much. The key idea here is to put as much information in a same file as possible and just drop all files in a same directory (it’s a kitchen-sink after all). From this “minimalist” design, arises the need to separate big blocks of texts (markdown/commonmark) from structural information (json, CSS). Here comes the section-based format: an article file consists of multiple sections separated with special line separators.&lt;/p&gt; &lt;h1 id="section-based-files"&gt;Section-based files&lt;/h1&gt; &lt;p&gt;A Section starts with a &lt;code&gt;=&lt;/code&gt; followed by a section name (e.g., &lt;code&gt;base:main-css.css&lt;/code&gt;) and ends with an empty line followed by another section (or the end of the file).&lt;/p&gt; &lt;p&gt;For instance, a fictional file containing three sections could be&lt;/p&gt; &lt;pre&gt;&lt;code&gt;=foo.json {&amp;quot;a&amp;quot;: 123} =foobar.css @import &amp;quot;toto.css&amp;quot;; =foobar.css @import &amp;quot;titi.css&amp;quot;; html{ background: cyan }; &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In that case, the three sections would consists of one &lt;code&gt;foo.json&lt;/code&gt; with some JSON object and two &lt;code&gt;foobar.css&lt;/code&gt; with some CSS rules. We note that sections can be repeated: the section-format itself does not prescibe whether sections can appear multiple times or whether they are mandatory. It is then the role of the KitchenSink blog engine to decide whether it makes sense to have such a structure. For instance, having two paragraphs of texts makes sense, having two titles may be a stretch.&lt;/p&gt; &lt;p&gt;Alas (fortunately?) KitchenSink &lt;code&gt;foo.json&lt;/code&gt; and &lt;code&gt;foobar.css&lt;/code&gt; do not exist. Instead, this article list sections supported by KitchenSink. Modifying the KitchenSink engine to support new sections is out of scope of this article. You’ll find plenty of section-based format examples by browsing the &lt;a href="https://github.com/kitchensink-tech/kitchensink/tree/main/website-src"&gt;source-files for this very website&lt;/a&gt;, KitchenSink names section-based format with the &lt;code&gt;.cmark&lt;/code&gt; extension for convenience (because the meaty-content is written in CommonMark).&lt;/p&gt; &lt;h1 id="supported-sections"&gt;Supported sections&lt;/h1&gt; &lt;p&gt;Recall that KitchenSink is both a library and an engine. We describe here sections when using KitchenSink without tuning. While using KitchenSink as a library, it should be easy enough to add new sections or new layouts or modify subtly how Kitchen-Sink interprets some section data.&lt;/p&gt; &lt;p&gt;Thus, the following documentation is descriptive of how the default KitchenSink engine works. It is not the case that this documentation is prescriptive (i.e., you are free to modify any behavior – just avoid confusing your users that may end up reading this piece of documentation).&lt;/p&gt; &lt;h2 id="build-info-mandatory"&gt;build-info [mandatory]&lt;/h2&gt; &lt;div class="section-details"&gt; &lt;p&gt;An important section to let Kitchen-Sink know which &lt;strong&gt;layout&lt;/strong&gt; to apply. Known layouts are &lt;code&gt;article&lt;/code&gt;, &lt;code&gt;index&lt;/code&gt; (for &lt;code&gt;index.cmark&lt;/code&gt;), &lt;code&gt;glossary&lt;/code&gt; (for &lt;code&gt;glossary.cmark&lt;/code&gt;), &lt;code&gt;topics&lt;/code&gt; (for &lt;code&gt;topics.cmark&lt;/code&gt;), &lt;code&gt;application&lt;/code&gt; for JavaScript single-page apps, &lt;code&gt;gallery&lt;/code&gt; for content galleries, and &lt;code&gt;listing&lt;/code&gt; for various listings. Overall, except for index and topics, the layout of content does not change significantly besides the HTML-nesting (which then allows you to modify CSS or hijack DOM elements for single-page apps).&lt;/p&gt; &lt;p&gt;The publicationStatus is either: &lt;code&gt;Public&lt;/code&gt;, &lt;code&gt;Upcoming&lt;/code&gt;, or &lt;code&gt;Archived&lt;/code&gt;. Upcoming and Archived articles are treated slightly differently from Public articles in listing or in the home page: they are ranked lower and they do not carry a summary. A warning is also inserted on Upcoming and Archived articles.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;example&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;=base:build-info.json {&amp;quot;layout&amp;quot;:&amp;quot;article&amp;quot; ,&amp;quot;publicationStatus&amp;quot;:&amp;quot;Public&amp;quot; } &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;h2 id="preamble-mandatory"&gt;preamble [mandatory]&lt;/h2&gt; &lt;div class="section-details"&gt; &lt;p&gt;Contains bibliographical information such as the title and author of the article. Optionally, you can add some link to a representative image.&lt;/p&gt; &lt;p&gt;Titles and authors are used throughout where it makes sense.&lt;/p&gt; &lt;p&gt;You can also overload the &lt;a href="https://www.w3.org/2005/10/howto-favicon"&gt;favicon&lt;/a&gt; using the &lt;code&gt;faviconUrl&lt;/code&gt; JSON key.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;example&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;=base:preamble.json {&amp;quot;author&amp;quot;: &amp;quot;Lucas DiCioccio&amp;quot; ,&amp;quot;date&amp;quot;: &amp;quot;2022-01-30T12:00:00Z&amp;quot; ,&amp;quot;title&amp;quot;: &amp;quot;The section-based format&amp;quot; } &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;h2 id="summary-recommended"&gt;summary [recommended]&lt;/h2&gt; &lt;div class="section-details"&gt; &lt;p&gt;Some commonmark to generate a short summary about the article.&lt;/p&gt; &lt;p&gt;The summary is displayed in article listings but also in OpenGraph and Twitter summaries when people share links on various media.&lt;/p&gt; &lt;p&gt;Also use as HTML Meta header for search engines.&lt;/p&gt; &lt;p&gt;Although the summary is arbitrary CommonMark, you should avoid complexifying it too much (i.e., stick to emphasis, inlined code, and bold).&lt;/p&gt; &lt;p&gt;You should also keep it short (a few sentences).&lt;/p&gt; &lt;p&gt;&lt;strong&gt;example&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;=base:summary.cmark A small article about _something_ interesting. &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;h2 id="topics-recommended"&gt;topics [recommended]&lt;/h2&gt; &lt;div class="section-details"&gt; &lt;p&gt;Meta-information for contextualizing the article content.&lt;/p&gt; &lt;p&gt;The representative image is displayed in article listings but also in OpenGraph and Twitter summaries when people share links on various media.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;topics: for internally-generated topics labels (for visitors, and for creating series) &lt;/li&gt; &lt;li&gt;keywords: for HTML meta headers (for search engines) &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;strong&gt;example&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;=base:topic.json {&amp;quot;topics&amp;quot;:[&amp;quot;authoring articles&amp;quot;, &amp;quot;how-to&amp;quot;, &amp;quot;sections&amp;quot;] ,&amp;quot;keywords&amp;quot;:[&amp;quot;static-site generators&amp;quot;, &amp;quot;design&amp;quot;] ,&amp;quot;imageLink&amp;quot;: &amp;quot;/images/some-image.jpeg&amp;quot; } &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;h2 id="social-recommended"&gt;social [recommended]&lt;/h2&gt; &lt;div class="section-details"&gt; &lt;p&gt;Listing of social-profiles on various sites, will drive the inclusion of links and some Twitter meta headers.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;example&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;=base:social.json {&amp;quot;twitter&amp;quot;: &amp;quot;lucasdicioccio&amp;quot; ,&amp;quot;linkedin&amp;quot;: &amp;quot;lucasdicioccio&amp;quot; ,&amp;quot;github&amp;quot;: &amp;quot;lucasdicioccio&amp;quot; } &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;h2 id="main-content"&gt;main content&lt;/h2&gt; &lt;div class="section-details"&gt; &lt;p&gt;Well, sometimes you have good reason to not have some content. But these sections are where you should be spending most of your effort.&lt;/p&gt; &lt;p&gt;Sections are inserted in order under &lt;code&gt;&amp;lt;section&amp;gt;&lt;/code&gt; html tags. This fact is important when you are tuning the CSS of your articles (e.g., using CSS &lt;code&gt;nth-*&lt;/code&gt; selectors).&lt;/p&gt; &lt;p&gt;&lt;strong&gt;example&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;=base:main-content.cmark some commonmark &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;h2 id="taken-off-cmark-good-to-know"&gt;taken-off cmark [good-to-know]&lt;/h2&gt; &lt;div class="section-details"&gt; &lt;p&gt;Sometimes you really are taking notes along the way and you want to leave out some paragraph out of the generated output. For instance you wrote some paragraph but realized it’s better to keep it around for future articles only.&lt;/p&gt; &lt;p&gt;Such content is merely ignored by KitchenSink when generating the HTML for articles.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;example&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;=base:taken-off.cmark some content that will not show up in the article &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;h2 id="css-recommended"&gt;CSS [recommended]&lt;/h2&gt; &lt;div class="section-details"&gt; &lt;p&gt;Some CSS block that is inlined in the HTML header. Includes are supported via the &lt;code&gt;@import&lt;/code&gt; CSS directive (note KitchenSink doesn’t interpret the CSS, it merely defers the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/@import"&gt;import-feature in CSS&lt;/a&gt; that web browsers implement).&lt;/p&gt; &lt;p&gt;Most often you’ll &lt;code&gt;@import&lt;/code&gt; some repeated CSS for your specific layout and then tune some rules that match the generated HTML structure and CSS classes you may have added in your articles.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;example&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;=base:main-css.css @import &amp;quot;css/colors.css&amp;quot;; @import &amp;quot;css/article.css&amp;quot;; h1 { margin: auto; } &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;h2 id="commands-advanced"&gt;commands [advanced]&lt;/h2&gt; &lt;div class="section-details"&gt; &lt;p&gt;Sometimes you want to build content from an external command. For instance, you could snapshot the agenda of your favorite music band each time you generate your blog.&lt;/p&gt; &lt;p&gt;KitchenSink has minimal support for such a scheme. The feature requires to specify&lt;/p&gt; &lt;ul&gt; &lt;li&gt;a command name (e.g. &lt;code&gt;ping&lt;/code&gt;) &lt;/li&gt; &lt;li&gt;command arguments, arguments are a fixed array (e.g., &lt;code&gt;[&amp;quot;-c&amp;quot;, &amp;quot;3&amp;quot;, &amp;quot;8.8.4.4&amp;quot;]&lt;/code&gt;) &lt;/li&gt; &lt;li&gt;a target name (e.g., &lt;code&gt;latency_to_best_ip&lt;/code&gt;) &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;KitchenSink then reserves the filename &lt;code&gt;/gen/out/&amp;lt;filename.cmark&amp;gt;__&amp;lt;target name&amp;gt;&lt;/code&gt; (i.e., &lt;code&gt;/gen/out/sections.cmark__latency_to_best_ip&lt;/code&gt; if we were to add this section in this article) and will execute the command, retrieve the standard output and put it in the file content.&lt;/p&gt; &lt;p&gt;The main intended use cases are:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;to generate extra or debugging metadata (e.g., to get the git-hash of the source repository or the hostname of the machine that built the website) &lt;/li&gt; &lt;li&gt;to help writing blog articles where you want to “show some code” (which I do extensively to &lt;code&gt;cat&lt;/code&gt; some example source files rather than copying them in the source directory upfront) &lt;/li&gt; &lt;li&gt;to support funny features (e.g., take a selfie when generating the site) &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Keep in mind that you may hit portability issues when switching systems (e.g., if you build your website in some automation, the automation need to be able to execute the commands).&lt;/p&gt; &lt;p&gt;&lt;span class="emoji" data-emoji="warning"&gt;⚠️&lt;/span&gt; Yes, this section is a bit like a CGI-bin and it opens all sorts of security risks if you do not know what you are doing. In particular, do not copy-paste commands from the Internet without paying close attention. In future version of KitchenSink I’ll likely add a flag to ignore this section to reduce security risks for people who would like to run KitchenSink on external sources. At this point I assume that KitchenSink users are tech-savvy geeks.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;example&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;=generator:cmd.json {&amp;quot;cmd&amp;quot;: &amp;quot;ping&amp;quot; ,&amp;quot;args&amp;quot;: [&amp;quot;-c&amp;quot;, &amp;quot;3&amp;quot;, &amp;quot;8.8.4.4&amp;quot;] ,&amp;quot;target&amp;quot;:&amp;quot;latency_to_best_ip&amp;quot; } &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;example with datasets&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;=base:dataset.json items2 [ {&amp;quot;name&amp;quot;: &amp;quot;foo&amp;quot;} , {&amp;quot;name&amp;quot;: &amp;quot;bar&amp;quot;} , {&amp;quot;name&amp;quot;: &amp;quot;baz&amp;quot;} ] =base:dataset.json items1 [ {&amp;quot;letter&amp;quot;: &amp;quot;alpha&amp;quot;} , {&amp;quot;letter&amp;quot;: &amp;quot;beta&amp;quot;} , {&amp;quot;letter&amp;quot;: &amp;quot;gamma&amp;quot;} ] =generator:cmd.json {&amp;quot;cmd&amp;quot;: &amp;quot;jq&amp;quot; ,&amp;quot;args&amp;quot;: [&amp;quot;.&amp;quot;] ,&amp;quot;target&amp;quot;:&amp;quot;jqified-dataset&amp;quot; } &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;/section&gt;&lt;section class="main-section"&gt;&lt;h2 id="dhall-advanced"&gt;dhall [advanced]&lt;/h2&gt; &lt;div class="section-details"&gt; &lt;p&gt;There is one difficult design point when statically-generating website is when we have datasets of repeated structure (e.g., an image list with title, date, sizes, filepath, preferred corner thickness etc.) and you want to generate some content on a page in a static form. I touch on this difficult use-case in a &lt;a href="https://dicioccio.fr/dhall-section-demo.html"&gt;past article on my blog&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;In this specific case, the section consists of a &lt;a href="https://dhall-lang.org/"&gt;Dhall&lt;/a&gt; expression typed so that it returns a page content.&lt;/p&gt; &lt;p&gt;The returned object must be of &lt;code&gt;Type&lt;/code&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class="language-dhall"&gt;{ contents : Text , format : Text } &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Where &lt;code&gt;format&lt;/code&gt; is either &lt;code&gt;cmark&lt;/code&gt; or &lt;code&gt;html&lt;/code&gt; and &lt;code&gt;contents&lt;/code&gt; is formatted in the appropriate format. The return type is currently rather primitive and will likely change in the future. Changes and specifications are tracked in a &lt;a href="/sections-dhall.html"&gt;WIP-page&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;example&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;=base:main-content.dhall let map = https://prelude.dhall-lang.org/List/map let alphabet : List Text = [ &amp;quot;Applicative&amp;quot; , &amp;quot;Bisiumulation&amp;quot; , &amp;quot;Closure&amp;quot; , &amp;quot;Distributive&amp;quot; , &amp;quot;...&amp;quot; ] let toCmarkListItem = \(v : Text) -&amp;gt; &amp;quot;- ${v}&amp;quot; let cmarkContents : List Text = map Text Text toCmarkListItem alphabet in { contents = cmarkContents , format = &amp;quot;cmark&amp;quot; } &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;h2 id="glossary-experimental"&gt;glossary [experimental]&lt;/h2&gt; &lt;div class="section-details"&gt; &lt;p&gt;Whether its a TLA or some other term, you sometimes want to introduce glossary terms. KitchenSink has some support for glossary in the form of parsing a special section and turning that in a series of &lt;code&gt;dl/dt/dd&lt;/code&gt; HTML tags towards the end of the article.&lt;/p&gt; &lt;p&gt;Glossary terms should be repeated across articles and can have diverging definitions across articles. A consolidated view of glossary terms is built when the special article &lt;code&gt;glossary.cmark&lt;/code&gt; with layout type &lt;code&gt;glossary&lt;/code&gt; is present.&lt;/p&gt; &lt;p&gt;In the future we may modify the generated HTML to include some glossary-links directly in the render body of articles or add glossary terms as nodes into the sitemap.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;example&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;=base:glossary.json {&amp;quot;glossary&amp;quot;: [ {&amp;quot;term&amp;quot;: &amp;quot;KS&amp;quot;, &amp;quot;definition&amp;quot;: &amp;quot;Kitchen Sink&amp;quot;} , {&amp;quot;term&amp;quot;: &amp;quot;TLA&amp;quot;, &amp;quot;definition&amp;quot;: &amp;quot;Three-letter acroynym&amp;quot;} ] } &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;h2 id="embedded-datasets-experimental"&gt;embedded datasets [experimental]&lt;/h2&gt; &lt;div class="section-details"&gt; &lt;p&gt;Sometimes you want to ship a dataset. An option is to create one file in the Kitchen-Sink directory. However you may not want to multiply files. Rather, sometimes you just want to inline some dataset in a document.&lt;/p&gt; &lt;p&gt;Datasets are useful if you write a small JavaScript demo tool. Datasets also are useful as templating mechanisms as JSON datasets are input of Dhall and Mustache sections.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;dataset&lt;/code&gt; section addresses such needs, by generating. &lt;span class="emoji" data-emoji="warning"&gt;⚠️&lt;/span&gt; The ordering of the insertion determines the resulting filename, for instance &lt;code&gt;/raw/data/sections.cmark__&amp;lt;datasetname&amp;gt;&amp;lt;index&amp;gt;.csv&lt;/code&gt; for the first dataset in the &lt;code&gt;sections.cmark&lt;/code&gt; file. With &lt;datasetname&gt; a name given on the section marker (cf. example) and &lt;index&gt; a Kitchen-Sink chosen value (for now a numeric index but it could become a hash)&lt;/p&gt; &lt;p&gt;In the future we will likely create extra metadata information:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;computing sha256 signatures of datasets &lt;/li&gt; &lt;li&gt;inserting some &lt;code&gt;&amp;lt;meta&amp;gt;&lt;/code&gt; tags in the HTML &lt;code&gt;head&lt;/code&gt; section &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;strong&gt;example&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;=base:dataset.csv some-csv-dataset foo;bar a;42 b;51 =base:dataset.json some-json-dataset [{&amp;quot;foo&amp;quot;:&amp;quot;a&amp;quot;, &amp;quot;bar&amp;quot;: 42} ,{&amp;quot;foo&amp;quot;:&amp;quot;b&amp;quot;, &amp;quot;bar&amp;quot;: 51} ] &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;/section&gt;&lt;section class="main-section"&gt;&lt;h2 id="mustache-templates-experimental"&gt;Mustache templates [experimental]&lt;/h2&gt; &lt;div class="section-details"&gt; &lt;p&gt;A well-known templating language for substituting a few variables in text objects is the &lt;a href="http://mustache.github.io/mustache.5.html"&gt;Mustache&lt;/a&gt; template language.&lt;/p&gt; &lt;p&gt;As of today the implementation is as follows:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Evaluation occurs at Site-Loading time (i.e., once for a running blog in server mode). &lt;/li&gt; &lt;li&gt;There are no partials. &lt;/li&gt; &lt;li&gt;The value available to templates is a object-collection of available datasets. Use &lt;code&gt;{{ . }}&lt;/code&gt; to “debug” the contents. &lt;/li&gt; &lt;li&gt;The content must return &lt;code&gt;.cmark&lt;/code&gt; contents (which in turns get turned into HTML). &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;I’ll likely change all of the above (for more control) but I’ve yet to fully-form ideas about the details. In particular, I have some PHP-envy to turn server-mode KitchenSink in a light webapp framework: after all, it’s a kitchen-sink.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;example&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;=base:dataset.json users [{&amp;quot;name&amp;quot;:&amp;quot;Albert&amp;quot;, &amp;quot;color&amp;quot;: &amp;quot;darksalmon&amp;quot;} ,{&amp;quot;name&amp;quot;:&amp;quot;Barbara&amp;quot;, &amp;quot;color&amp;quot;: &amp;quot;rebeccapurple&amp;quot;} ] =base:main-content.mustache ### hello from a Mustache template {{# users }} - {{ name }} : &amp;lt;span style=&amp;quot;color: {{ color }}&amp;quot;&amp;gt;Preferred Color&amp;lt;/span&amp;gt; {{/ users }} &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;/section&gt;&lt;section class="main-section"&gt;&lt;h3 id="hello-from-a-mustache-template"&gt;hello from a Mustache template&lt;/h3&gt; &lt;ul&gt; &lt;li&gt;Albert : &lt;span style="color: darksalmon"&gt;Preferred Color&lt;/span&gt; &lt;/li&gt; &lt;li&gt;Barbara : &lt;span style="color: rebeccapurple"&gt;Preferred Color&lt;/span&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/section&gt;&lt;section class="main-section"&gt;&lt;hr /&gt; &lt;/section&gt;&lt;/div&gt;
        </content>
        <link href="https://kitchensink-tech.github.io/sections.html" rel="alternate"/>
        <summary type="text">
            Writing articles in KitchenSink requires to write text files with a specific format called the section-based authoring format. A section-based format consists of delimited sections of text. Sections either configure the page (e.g., the tile of the page) or provide _meaty content_ for readers to read. This article describes the section-based format and sections available to write articles.
        </summary>
    </entry>
    <entry>
        <id>
            https://kitchensink-tech.github.io/development.html
        </id>
        <title type="text">
            Development
        </title>
        <updated>
            1970-01-01T00:00:00Z
        </updated>
        <author>
            <name>
                Lucas DiCioccio
            </name>
        </author>
        <content type="html">
            &lt;div class="main-article"&gt;&lt;section class="main-section"&gt;&lt;h1 id="project-site-source-code-and-reporting-issues"&gt;project site, source code, and reporting issues&lt;/h1&gt; &lt;p&gt;You’ll find the source code of KitchenSink on GitHub at the following repository: &lt;a href="https://github.com/kitchensink-tech/kitchensink"&gt;https://github.com/kitchensink-tech/kitchensink&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Please also use GitHub on the same project to &lt;a href="https://github.com/kitchensink-tech/kitchensink/issues"&gt;file issues&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;As of date, there are no discussion channels such as a Discord or Slack instance. Please reach-out directly to me via email or on Twitter (cf. social links at the bottom of this page).&lt;/p&gt; &lt;h1 id="repository-organization"&gt;repository organization&lt;/h1&gt; &lt;p&gt;Much like the title tells, the code is a kitchen sink at the moment. It is still unclear what will make good boundaries. However what is clear is that we want two keep the following: Haskell for the blog engine, and PureScript for frontend “helper JS tools”.&lt;/p&gt; &lt;p&gt;Both the engine code, the frontend helpers code, and the KitchenSink documentation (this site) sources are in a same repository out of simplicity: a feature can be added and documented in a same commit.&lt;/p&gt; &lt;h1 id="code-organization-and-basic-concepts"&gt;code organization and basic concepts&lt;/h1&gt; &lt;p&gt;At this point, the code grew mostly organically and suffers from arbitrary choices. As we implement &lt;a href="/wishlist.html"&gt;new features&lt;/a&gt;, the need to rework and modularize some aspects will show up.&lt;/p&gt; &lt;p&gt;For sure what will stay are:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;the section-based format is a central way to add functionalities, we may parametrize the Parser to be extensible &lt;/li&gt; &lt;li&gt;the notion of a Site has something loaded using some IO parametrized by the engine &lt;/li&gt; &lt;li&gt;the notion of Target to hold instruction to build some content with a destination path &lt;/li&gt; &lt;li&gt;the fact that layouts are function from Site to Target, possibly in multiple ‘stages’ (or a fixpoint as it is now) &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Things I would like to improve significantly:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;possibility to modularize the section-based parser and the layout function &lt;/li&gt; &lt;li&gt;where we load the Site from in the engine (should be feasible to load Sites without resorting to the section-based parser – i.e., proper decoupling) &lt;/li&gt; &lt;li&gt;settle on some JSON format for advanced analytics rather than the current ad-hoc historical values &lt;/li&gt; &lt;/ul&gt; &lt;h1 id="library-curation-philosophy"&gt;library curation philosophy&lt;/h1&gt; &lt;p&gt;The libraries we incorporate are “standard Haskell”. In particular we only want to bring-in libraries that do not force callers to operate for long in complicated Monad stacks. Rather we want to incorporate functionalities and wrap them to our suiting. In short, avoid situations where one has to &lt;em&gt;add code to remove features&lt;/em&gt;.&lt;/p&gt; &lt;h1 id="generating-most-of-purescript-bindings-directly-from-haskell"&gt;generating most of PureScript bindings directly from Haskell&lt;/h1&gt; &lt;p&gt;The &lt;code&gt;purs/&lt;/code&gt; directory contains a package named &lt;code&gt;kitchen-sink-compat&lt;/code&gt;. A number of sources files in this package are automatically generated from Haskell using &lt;a href="https://github.com/eskimor/purescript-bridge"&gt;purescript-bridge&lt;/a&gt; and &lt;a href="https://github.com/bentongxyz/purescript-argonaut-aeson-generic"&gt;a fork&lt;/a&gt; of the &lt;code&gt;argonaut-aeson-generic&lt;/code&gt; PureScript package.&lt;/p&gt; &lt;p&gt;To regenerate the bindings use:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;cabal run -- kitchen-sink-purescript-bridge --outputDir ../purs/kitchen-sink-compat/src/ &lt;/code&gt;&lt;/pre&gt; &lt;/section&gt;&lt;/div&gt;
        </content>
        <link href="https://kitchensink-tech.github.io/development.html" rel="alternate"/>
        <summary type="text">
            You want to change, extend, or restrict Kitchen-Sink? found a bug? want to extract some feature out of it or on the opposite, embed it in a larger application?
        </summary>
    </entry>
    <entry>
        <id>
            https://kitchensink-tech.github.io/engine.html
        </id>
        <title type="text">
            Engine
        </title>
        <updated>
            1970-01-01T00:00:00Z
        </updated>
        <author>
            <name>
                Lucas DiCioccio
            </name>
        </author>
        <content type="html">
            &lt;div class="main-article"&gt;&lt;section class="main-section"&gt;&lt;p&gt;In the &lt;a href="/getting-started.html"&gt;getting started&lt;/a&gt; article, we present the following picture:&lt;/p&gt; &lt;div class="figure"&gt; &lt;p&gt;&lt;img src="/gen/images/architecture-01-pipeline.dot.png" alt="pipeline" /&gt;&lt;/p&gt; &lt;/div&gt; &lt;p&gt;Each steps are pretty handwavy at this point. Between written content and &lt;code&gt;.html&lt;/code&gt; outputs, there is a vague &lt;code&gt;produce html&lt;/code&gt; function. The focus of this article is to expand on this particular step. Indeed the “core” of the Engine is to turn source files into a static website. Asked to zoom in one level closer to understand what this step is, I would draw such a picture (I actually did on my personal blog).&lt;/p&gt; &lt;div class="figure"&gt; &lt;p&gt;&lt;img src="/gen/images/architecture-02-engine-pipeline.dot.png" alt="pipeline" /&gt;&lt;/p&gt; &lt;/div&gt; &lt;p&gt;Alas such a level of detail is still underwhelming: the picture merely illustrate the rather uninteresting life of a static-site generator:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;em&gt;read&lt;/em&gt;: find and load input data and configuration files &lt;/li&gt; &lt;li&gt;&lt;em&gt;assemble&lt;/em&gt;: build an in-memory representation of everything the site contains &lt;/li&gt; &lt;li&gt;&lt;em&gt;produce&lt;/em&gt;: generate output files in the proper location &lt;/li&gt; &lt;/ul&gt; &lt;h1 id="in-depth"&gt;In depth&lt;/h1&gt; &lt;p&gt;Most of what I want to write here is already covered partially in my &lt;a href="https://dicioccio.fr/how-this-blog-works.html#implementation"&gt;original article&lt;/a&gt; but I’ll come back to this page often to build some reference of the key data-types and functions.&lt;/p&gt; &lt;div class="figure"&gt; &lt;p&gt;&lt;img src="/gen/images/architecture-03-in-depth-engine-pipeline.dot.png" alt="pipeline" /&gt;&lt;/p&gt; &lt;/div&gt; &lt;h1 id="server-mode-specifics"&gt;Server-mode specifics&lt;/h1&gt; &lt;p&gt;Generating files from pipelines is mundane, and I wrote KitchenSink to support some advanced features that help me stay “in the flow” while writing article contents.&lt;/p&gt; &lt;p&gt;Among the &lt;code&gt;scaffolding&lt;/code&gt; source files, some two interesting JavaScript files exist only for the support of the live-server: &lt;code&gt;autoreload.js&lt;/code&gt; and &lt;code&gt;add-dev-route.js&lt;/code&gt;. Their respective name may change in future versions but the feature will be maintained.&lt;/p&gt; &lt;h2 id="the-autoreloadjs-script"&gt;The &lt;code&gt;autoreload.js&lt;/code&gt; script&lt;/h2&gt; &lt;p&gt;The auto-reload script is a small loop that tries to make sure that at any given time, the page shown on the web-browser is up-to-date. Since we are focused.&lt;/p&gt; &lt;p&gt;The interesting bit is on the engine-side: the server monitors for filesystem changes. Upon changes, a thread on the server wakes-up all waiting clients.&lt;/p&gt; &lt;p&gt;In some case we change the generator-code or the layout itself. In that case, no filesystem changes will ever be notices, we need another mechanism for clients to know the server has new content. The client remembers what is the “server-id” and the server returns whether it recognizes its own server-id.&lt;/p&gt; &lt;p&gt;For now the server-id information is passed in a query parameter as we cannot pass a bunch of informations in a HTTP-get at reload times (alternatives are some form of storage on the client-side – we’ll eventually get there).&lt;/p&gt; &lt;h2 id="the-add-dev-routejs-script"&gt;The &lt;code&gt;add-dev-route.js&lt;/code&gt; script&lt;/h2&gt; &lt;p&gt;Another nicety is that we can trigger a full-rebuild of the website without leaving one’s preview browser. The gain is little but there is some satisfaction to press a button on an interface and see your website being generated or published.&lt;/p&gt; &lt;p&gt;Upon loading, the &lt;code&gt;add-dev-route.js&lt;/code&gt; script creates a few buttons in the &lt;code&gt;#navigation&lt;/code&gt; bar (i.e., the layout has to cooperate a bit, we’ll change that a bit later). Buttons then trigger actions handled by the server.&lt;/p&gt; &lt;h2 id="metrics-because-why-not"&gt;Metrics because why not&lt;/h2&gt; &lt;p&gt;The server exposes Prometheus metrics. There are some use to it:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;if you complain about KitchenSink being slow &lt;/li&gt; &lt;li&gt;if you like vanity metrics about how many bytes per minute you add to your articles &lt;/li&gt; &lt;li&gt;me debugging why the engine reloads too often &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If you ever change the engine, please keep in mind to also add counters for new features. You can even have a target to catch the resulting metrics while generating your website output to record your performance for future uses.&lt;/p&gt; &lt;/section&gt;&lt;/div&gt;
        </content>
        <link href="https://kitchensink-tech.github.io/engine.html" rel="alternate"/>
        <summary type="text">
            This article answers questions the engine (i.e., the glue-code performing the dance to understand what layout code to apply to generate results).
        </summary>
    </entry>
    <entry>
        <id>
            https://kitchensink-tech.github.io/sections-dhall.html
        </id>
        <title type="text">
            Dhall support in depth
        </title>
        <updated>
            1970-01-01T00:00:00Z
        </updated>
        <author>
            <name>
                Lucas DiCioccio
            </name>
        </author>
        <content type="html">
            &lt;div class="main-article"&gt;&lt;section class="main-section"&gt;&lt;p&gt;The &lt;a href="https://dhall-lang.org/"&gt;Dhall&lt;/a&gt; support in KitchenSink provides a template engine unlike many static-site generators. In typical static-site generators, the template language serves two purposes: dictating the structure of the HTML files, and generating repetitive content of HTML files like for data tables. In KitchenSink, &lt;a href="/layouts.html"&gt;Layouts&lt;/a&gt; dictate the HTML structure and are hard to change. Dhall provides a pre-processor to apply some template on repetititve contents to render &lt;a href="/sections.html"&gt;Sections&lt;/a&gt;.&lt;/p&gt; &lt;h1 id="dhall-as-a-pre-processor"&gt;Dhall as a pre-processor&lt;/h1&gt; &lt;p&gt;Why Dhall rather than other languages? The short answer is that Dhall hits a sweet spot for pre-processing sections in static-blog generators. Dhall is at a same time: deterministic, easy to embed in Kitchen-Sink, and expressive. Let’s develop these points.&lt;/p&gt; &lt;p&gt;First, Dhall is a deterministic language. A major benefit here is that Dhall is simple on a conceptual level: you can substitute a Dhall expression with its result and it will work as expected. Further, being deterministic, Dhall disallows user-defined side-effects. Albeit a constraint for people writing Dhall code, such determinism comes handy to write a pre-processor: a pre-processor turns &lt;code&gt;Sections&lt;/code&gt; into &lt;code&gt;Sections&lt;/code&gt;, since the pre-processor does not do more, for instance, by having no extra side-effects to track. We do not freeze KitchenSink development into a bad-architecture as the &lt;code&gt;Section -&amp;gt; Section&lt;/code&gt; function can be moved without surprises.&lt;/p&gt; &lt;p&gt;Second, Dhall is embeddable in Haskell, the programming language in which KitchenSink is written. The immediate benefit is that no external setup is required: KitchenSink embeds the same Dhall interpreter as the official Dhall binary and that’s it. Compare this simplicity (no setup required) to generator sections, whose result vary depending on which tools are available on each setups.&lt;/p&gt; &lt;p&gt;Third, Dhall is expressive enough to have libraries of functions that you import over the network or on the file-system. Such imports open the door to avoiding redundant code (e.g., to re-use the same &lt;code&gt;base:social&lt;/code&gt; content in every article). Networked imports open the door to community-based sharing.&lt;/p&gt; &lt;p&gt;Summarizing, the choice of Dhall is not that surprising after analyzis. Dhall fits the problem of pre-processing article sections pretty well, without costing much to implement and without freezing the design of KitchenSink engine.&lt;/p&gt; &lt;h1 id="examples"&gt;Examples&lt;/h1&gt; &lt;p&gt;Let’s now give some examples.&lt;/p&gt; &lt;/section&gt;&lt;section class="main-section"&gt;&lt;h2 id="rendering-a-section-in-commonmark"&gt;Rendering a section in CommonMark&lt;/h2&gt; &lt;p&gt;&lt;strong&gt;example 1&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;=base:main-content.dhalL { contents = [&amp;quot;__generated from dhall__&amp;quot;, &amp;quot;\n&amp;quot;, kitchensink.file ], format = &amp;quot;cmark&amp;quot; } &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;example 2&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;=base:main-content.dhall { contents = [ &amp;quot;::: output&amp;quot; , &amp;quot;\n&amp;quot; , &amp;quot;__this code block is defined in some Dhall__&amp;quot; , &amp;quot;\n&amp;quot; , &amp;quot;file=&amp;quot;, kitchensink.file , &amp;quot;\n&amp;quot;, &amp;quot;section=&amp;quot; , Integer/show kitchensink.sectionNum , &amp;quot;\n&amp;quot; , &amp;quot;:::&amp;quot; ] , format = &amp;quot;cmark&amp;quot; } &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;rendered in HTML (via CommonMark)&lt;/p&gt; &lt;/section&gt;&lt;section class="main-section"&gt;&lt;div class="output"&gt; &lt;p&gt;&lt;strong&gt;this code block is defined in some Dhall&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;file= website-src/sections-dhall.cmark&lt;/p&gt; &lt;p&gt;section= +9&lt;/p&gt; &lt;p&gt;some number from a dataset: 42&lt;/p&gt; &lt;p&gt;some list from a dataset:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;foo &lt;/li&gt; &lt;li&gt;bar &lt;/li&gt; &lt;li&gt;baz &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/section&gt;&lt;section class="main-section"&gt;&lt;h2 id="rendering-a-section-in-html"&gt;Rendering a section in HTML&lt;/h2&gt; &lt;p&gt;You can return HTML directly-formatted.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;example&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;=base:main-content.dhall { contents = [&amp;quot;__generated from dhall__&amp;quot;, &amp;quot;\n&amp;quot;, kitchensink.file ], format = &amp;quot;html&amp;quot; } &lt;/code&gt;&lt;/pre&gt; &lt;/section&gt;&lt;section class="main-section"&gt;&lt;h2 id="rendering-json-sections"&gt;Rendering JSON-sections&lt;/h2&gt; &lt;p&gt;Dhall can substitute itself to JSON objects as well. Jut replace a &lt;code&gt;.json&lt;/code&gt; with &lt;code&gt;.dhall&lt;/code&gt; and KitchenSink will interpret a Dhall expression to fill-in the JSON.&lt;/p&gt; &lt;p&gt;A few use cases are envisioned:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;generating a &lt;em&gt;commands&lt;/em&gt; from Dhall expressions &lt;/li&gt; &lt;li&gt;generating a command requiring the filename &lt;/li&gt; &lt;li&gt;avoiding redundant information like social infos using Dhall’s support for remote includes &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;strong&gt;example 1&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;=generator:cmd.dhall let ping = { cmd = &amp;quot;ping&amp;quot; , args = [&amp;quot;-c&amp;quot;, &amp;quot;3&amp;quot;, &amp;quot;8.8.4.4&amp;quot;] , target = &amp;quot;latency&amp;quot; } in { contents = ping , format = &amp;quot;json&amp;quot; } &lt;/code&gt;&lt;/pre&gt; &lt;/section&gt;&lt;section class="main-section"&gt;&lt;p&gt;&lt;strong&gt;example 2&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;This section is handy to show the content in this file. Note that I use &lt;code&gt;kitchensink.file&lt;/code&gt; to get the path name.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;=generator:cmd.dhall let cmd = { cmd = &amp;quot;cat&amp;quot; , args = [kitchensink.file] , target = &amp;quot;cat-this-file&amp;quot; } in { contents = cmd , format = &amp;quot;json&amp;quot; } &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;a href="/gen/out/sections-dhall.cmark__cat-this-file"&gt;once the generated section is evaluated&lt;/a&gt;&lt;/p&gt; &lt;/section&gt;&lt;section class="main-section"&gt;&lt;p&gt;&lt;strong&gt;example 3&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;You could write the content in &lt;code&gt;./social.dhall&lt;/code&gt; once and import the content.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;=base:social.dhall { contents = ./social.dhall , format = &amp;quot;json&amp;quot; } &lt;/code&gt;&lt;/pre&gt; &lt;/section&gt;&lt;section class="main-section"&gt;&lt;p&gt;&lt;strong&gt;example 4&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;You can also generate JSON datasets if for some reason writing them in JSON is not immediate enough .&lt;/p&gt; &lt;pre&gt;&lt;code&gt;=base:dataset.dhall alice-bob { contents = [ {name = &amp;quot;Alice&amp;quot;, posts = 22.0} , {name = &amp;quot;Bob&amp;quot;, posts = 7.0} ] , format = &amp;quot;json&amp;quot; } &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;a href="/raw/data/sections-dhall.cmark__1.json"&gt;rendered&lt;/a&gt;&lt;/p&gt; &lt;/section&gt;&lt;section class="main-section"&gt;&lt;h1 id="implementation-notes"&gt;Implementation notes&lt;/h1&gt; &lt;p&gt;The following notes are more useful for myself and for people curious about modifying or contributing to KitchenSink.&lt;/p&gt; &lt;h2 id="present"&gt;present&lt;/h2&gt; &lt;h3 id="the-evaluation-chain"&gt;The evaluation chain&lt;/h3&gt; &lt;p&gt;Today SiteLoader traverses all sections (i.e., after mapping Article Sections to Article Sections). Upon encountering a &lt;code&gt;.dhall&lt;/code&gt; section, SiteLoader evaluates the content as a Dhall expression returning some well-known format.&lt;/p&gt; &lt;p&gt;Further, datasets encountered during this phase are collected in a &lt;code&gt;datasets&lt;/code&gt; object. Previous datasets are passed to Dhall sections. Thus Dhall can templatize an in-line dataset.&lt;/p&gt; &lt;p&gt;Thus, unlike &lt;code&gt;generators&lt;/code&gt;, Dhall sections are pre-processors. They are evaluated once. When operating Kitchen-Sink as a static-site generator there is no much difference, however if you operate Kitchen-Sink as a live-website, then you cannot use Dhall as a generator-on-steroids.&lt;/p&gt; &lt;h3 id="the-kitchensink-object"&gt;The &lt;code&gt;kitchensink&lt;/code&gt; object&lt;/h3&gt; &lt;p&gt;Evaluated Dhall expressions carry information provided by KitchenSink. This information is bound to the &lt;code&gt;kitchensink&lt;/code&gt; Dhall value and has the following structure:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-dhall"&gt;{ file : Text -- contains the source file path for the cmark , sectionNum : Integer -- contains the section number of this file (starting from zero) , datasets : &amp;lt;data-dependant&amp;gt; -- contains a record&amp;lt;dataset-name, json-value-to-dhall&amp;gt; or an error message if it failed to load } &lt;/code&gt;&lt;/pre&gt; &lt;h2 id="future-work"&gt;future work&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;carry-over more context from previous sections &lt;/li&gt; &lt;li&gt;allow appending new sections (i.e., preprocess articles over sections)? &lt;/li&gt; &lt;/ul&gt; &lt;/section&gt;&lt;/div&gt;
        </content>
        <link href="https://kitchensink-tech.github.io/sections-dhall.html" rel="alternate"/>
        <summary type="text">
            Documenting the special feature of Dhall-sections.
        </summary>
    </entry>
    <entry>
        <id>
            https://kitchensink-tech.github.io/getting-started.html
        </id>
        <title type="text">
            Getting started
        </title>
        <updated>
            1970-01-01T00:00:00Z
        </updated>
        <author>
            <name>
                Lucas DiCioccio
            </name>
        </author>
        <content type="html">
            &lt;div class="main-article"&gt;&lt;section class="main-section"&gt;&lt;h2 id="expectations"&gt;expectations&lt;/h2&gt; &lt;p&gt;At its core, KitchenSink is a static-site generator &lt;em&gt;library&lt;/em&gt; with merely a &lt;em&gt;default theme&lt;/em&gt;. That is, you can have multiple integration modes to run a KitchenSink-generated blog.&lt;/p&gt; &lt;p&gt;In this article, we browse you through the simple case where you are happy with a website that looks like this one – or at least has a similar HTML structure. As &lt;a href="http://www.csszengarden.com/"&gt;the CSS Zen Garden&lt;/a&gt; has demonstrated, one can do wonders with only styling. Future releases of KitchenSink may include layouts or websites that are not “showcased” on this documentation site.&lt;/p&gt; &lt;h2 id="pipeline"&gt;pipeline&lt;/h2&gt; &lt;p&gt;Before you get a website to entertain your readers, a number of steps are required. This guide navigates you through a subset of the complexity and assumes some familiarity with programming toolchains and workflows.&lt;/p&gt; &lt;p&gt;You need a few broad steps to get started:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;get KitchenSink source code &lt;/li&gt; &lt;li&gt;(optional, advanced) adapt the layout or the commands &lt;/li&gt; &lt;li&gt;compile KitchenSink &lt;/li&gt; &lt;li&gt;write some content &lt;/li&gt; &lt;li&gt;produce some HTML &lt;/li&gt; &lt;li&gt;publish your website &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;We illustrate these steps in the following picture (which we refer as &lt;em&gt;the dependency graph&lt;/em&gt; here):&lt;/p&gt; &lt;div class="figure"&gt; &lt;p&gt;&lt;img src="/gen/images/architecture-01-pipeline.dot.png" alt="KitchenSink building pipeline" /&gt;&lt;/p&gt; &lt;/div&gt; &lt;p&gt;The dependency graph starts from the left with tooling and move to the right towards an HTML website making readers happy. In the above pictures “egg” shapes represent tools whereas data files use a “file” shape.&lt;/p&gt; &lt;p&gt;The rest of this guide covers only some subset of the whole experience. In particular, we assume that the advanced-topic of editing KitchenSink layouts is out of scope. Also, we skip the “publish website” part; you should find some help on “hosting a static website” elsewhere – at this point we believe KitchenSink is so niche that you will figure out this part. We also assume that you know how to install and run programming tools on your machine.&lt;/p&gt; &lt;h2 id="requirements"&gt;requirements&lt;/h2&gt; &lt;p&gt;Requirements correspond to the “left leaves” tools in the dependency graph.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;some &lt;code&gt;git&lt;/code&gt; installation &lt;/li&gt; &lt;li&gt;some Haskell installation with &lt;code&gt;cabal&lt;/code&gt; (tested with &lt;code&gt;ghc&lt;/code&gt; 9.2.4), we recommend &lt;a href="https://www.haskell.org/ghcup/"&gt;ghcup&lt;/a&gt; if you have no Haskell toolchain preference yet &lt;/li&gt; &lt;li&gt;(optional) &lt;code&gt;graphviz&lt;/code&gt; for generating images from dot-sources &lt;/li&gt; &lt;li&gt;(optional) other commands you may want to use to generate contents &lt;/li&gt; &lt;li&gt;(not covered) some publication script to host a directory of static-files online (e.g., GitHub pages, Netlify) &lt;/li&gt; &lt;/ul&gt; &lt;h2 id="build-and-install-from-source"&gt;build and install from source&lt;/h2&gt; &lt;p&gt;The goal here is to build &lt;code&gt;kitchen-sink-exe&lt;/code&gt; in the dependency graph. Cabal’s install directory must be in your execution &lt;code&gt;PATH&lt;/code&gt; environment variable afterwards.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-console"&gt;git clone https://github.com/kitchensink-tech/kitchensink.git cd kitchensink/hs cabal build cabal install &lt;/code&gt;&lt;/pre&gt; &lt;h2 id="minimal-site-setup"&gt;minimal site setup&lt;/h2&gt; &lt;p&gt;The goal here is to run KitchenSink in server-mode (i.e., we do not output &lt;code&gt;.html&lt;/code&gt; files directly as shown in the dependency graph but we edit them live).&lt;/p&gt; &lt;p&gt;&lt;strong&gt;prepare a directory structure&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class="language-console"&gt;bash scaffolding/outputdir.sh www bash scaffolding/sourcedir.sh site-source &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;start the live-edit server&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class="language-console"&gt;kitchen-sink serve --srcDir site-source/ --outDir www/ --servMode DEV --port 7654 &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Then navigate to &lt;code&gt;http://localhost:7654/&lt;/code&gt; you’ll notice there are a few things to tune. Things like the page title must be changed in the &lt;a href="/kitchen-sink-dot-json"&gt;&lt;code&gt;kitchen-sink.json&lt;/code&gt;&lt;/a&gt; file (note: as of today when you edit this file, you need to restart the server for all parameters to be taken into account).&lt;/p&gt; &lt;p&gt;&lt;strong&gt;learn how to write articles&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;In your editor then you can add or edit new &lt;code&gt;.cmark&lt;/code&gt; files, try adding some “hello world” first. Then you can experiment with adding more involved &lt;a href="/sections.html"&gt;sections&lt;/a&gt; or various types of &lt;a href="/other-formats.html"&gt;contents&lt;/a&gt;&lt;/p&gt; &lt;h2 id="producing-html-contents"&gt;producing html contents&lt;/h2&gt; &lt;p&gt;Before producing some HTML contents to upload, you should modify the &lt;a href="/kitchen-sink-dot-json"&gt;&lt;code&gt;kitchen-sink.json&lt;/code&gt;&lt;/a&gt; file to give some title to your website and prepare tell the URL that will host your website once it is uploaded.&lt;/p&gt; &lt;p&gt;You either &lt;strong&gt;run &lt;code&gt;produce&lt;/code&gt; on the live preview&lt;/strong&gt; (note: as of today when you edit the &lt;code&gt;kitchen-sink.json&lt;/code&gt; file, you need to restart the server for all parameters to be taken into account) while running KitchenSink in serve mode.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Alternatively&lt;/strong&gt; you separately run the following command:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-console"&gt;kitchen-sink produce --srcDir site-source/ --outDir www/ &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;At this point the &lt;code&gt;www&lt;/code&gt; output dir should have the content for your website.&lt;/p&gt; &lt;script src="js/copy-snippets.js"&gt;&lt;/script&gt; &lt;/section&gt;&lt;/div&gt;
        </content>
        <link href="https://kitchensink-tech.github.io/getting-started.html" rel="alternate"/>
        <summary type="text">
            This article gets you started with KitchenSink. As of date, you need some amount of programming know-how.
        </summary>
    </entry>
    <entry>
        <id>
            https://kitchensink-tech.github.io/layouts.html
        </id>
        <title type="text">
            Layouts and extensions
        </title>
        <updated>
            1970-01-01T00:00:00Z
        </updated>
        <author>
            <name>
                Lucas DiCioccio
            </name>
        </author>
        <content type="html">
            &lt;div class="main-article"&gt;&lt;section class="main-section"&gt;&lt;p&gt;There are two notions of layouts in KitchenSink: &lt;em&gt;article layouts&lt;/em&gt; and &lt;em&gt;website layouts&lt;/em&gt;. This article first discusses how they differ, then we deep-dive in Website Layouts.&lt;/p&gt; &lt;h2 id="article-vs-website-layouts"&gt;Article vs. Website layouts&lt;/h2&gt; &lt;p&gt;Article Layouts are per-article configurations which allow to tune what a rendered-article looks like. This configuration is set in the &lt;code&gt;base:build-info.json&lt;/code&gt; &lt;a href="/sections.html"&gt;section&lt;/a&gt;. For instance, while writing this text, this page is an &lt;strong&gt;Upcoming Article&lt;/strong&gt;, when I’ll find that the content is ready, I’ll change this configuration to a &lt;strong&gt;Published Article&lt;/strong&gt; . An example configuration is as follows:.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;=base:build-info.json {&amp;quot;layout&amp;quot;:&amp;quot;article&amp;quot; ,&amp;quot;publicationStatus&amp;quot;:&amp;quot;Upcoming&amp;quot; } &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The &lt;code&gt;layout&lt;/code&gt; directive indicates how KitchenSink should intepret (in a broad sense) the rest of the &lt;code&gt;.cmark&lt;/code&gt; article. The layout not only influences the HTML output of the article content: the layout also can influence the presence of the navigation bar at the top, or just about anything. If the directive were &lt;code&gt;application&lt;/code&gt; instead, we would have no default CSS and no navigation bar as we expect the article content to take-over the whole page. Currently, these layouts are mostly documented in the documentation about the build-info &lt;a href="/sections.html"&gt;section&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;In addition, KitchenSink utilises the &lt;code&gt;publicationStatus&lt;/code&gt; to further tweak some behaviours here and there. For instance, an &lt;code&gt;Upcoming&lt;/code&gt; article will have a warning banner. Upcoming articles will show up grayed-out in article listings. Upcoming articles will not appear in the Atom feed. We’ve yet to document all such behaviors. However, if you wonder where KitchenSink takes all these rules, we can give you the answer right away: from the Website Layout &lt;span class="emoji" data-emoji="bulb"&gt;💡&lt;/span&gt;!&lt;/p&gt; &lt;p&gt;Website Layouts carry most of the “business rules” in KitchenSink. Creating a Website Layout is a significant modification of KitchenSink. Indeed, Website Layouts control how the collection of files in the KitchenSink directory are interpreted into a website in a broad sense. The Website Layout dictates the directory structure, the HTML contents, CSS files, videos, what have you.&lt;/p&gt; &lt;p&gt;Writing your own Layout allows you to:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;support more or fewer Section types &lt;/li&gt; &lt;li&gt;redefine the set of Targets and their contents &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Layouts in KitchenSink are implemented in the &lt;a href="https://haskell.org/"&gt;Haskell&lt;/a&gt; programming language and require some firm understanding of Haskell if you want to modify a layout, let-alone build a layout from scratch.&lt;/p&gt; &lt;h2 id="article-layouts"&gt;Article layouts&lt;/h2&gt; &lt;p&gt;Website layouts define the behaviour of Article layouts. Kitchen-Sink currently supports a single website-layout (the one for this website). For now, I’ll refer you to &lt;a href="/sections.html#build-info-mandatory"&gt;the build-info section documentation&lt;/a&gt;.&lt;/p&gt; &lt;h2 id="writing-website-layouts"&gt;Writing website layouts&lt;/h2&gt; &lt;p&gt;The Website Layout is so important that the KichenSink code merely speak about Layout. This section describes KitchenSink’s Layout type in depth.&lt;/p&gt; &lt;p&gt;Previous paragraphs introduced Website Layouts as the way to customize the business rules to turn &lt;code&gt;.cmark&lt;/code&gt; section-files into &lt;code&gt;.html&lt;/code&gt; and other sort of files. Hence, so far we’ve answered &lt;strong&gt;what&lt;/strong&gt; is the purpose of Website Layouts. We now discuss &lt;strong&gt;how&lt;/strong&gt; Website Layouts operate. As often in Haskell, the best way to describe &lt;strong&gt;how&lt;/strong&gt; something works is to show and scrutinize type signatures. Hence, let’s dive-in the &lt;code&gt;Layout&lt;/code&gt; type and see for ourselves. As of today, the &lt;code&gt;Layout&lt;/code&gt; type is defined as follows:&lt;/p&gt; &lt;div class="code code--highlighted"&gt;&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode"&gt;&lt;code class="sourceCode"&gt;&lt;span id="1"&gt;&lt;a href="#1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;data&lt;/span&gt; &lt;span class="dt"&gt;Layout&lt;/span&gt; ext meta summary&lt;/span&gt; &lt;span id="2"&gt;&lt;a href="#2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Layout&lt;/span&gt;&lt;/span&gt; &lt;span id="3"&gt;&lt;a href="#3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; {&lt;span class="ot"&gt; siteTargets ::&lt;/span&gt; &lt;span class="dt"&gt;OutputPrefix&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; meta &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Site&lt;/span&gt; ext &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; [&lt;span class="dt"&gt;Target&lt;/span&gt; ext summary]&lt;/span&gt; &lt;span id="4"&gt;&lt;a href="#4" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; ,&lt;span class="ot"&gt; extraSectiontypes ::&lt;/span&gt; [&lt;span class="dt"&gt;ExtraSectionType&lt;/span&gt; ext]&lt;/span&gt; &lt;span id="5"&gt;&lt;a href="#5" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;It helps to squint a bit and ignore type-level parameters. Simplifying the above, we could write Layout as:&lt;/p&gt; &lt;div class="code code--highlighted"&gt;&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode"&gt;&lt;code class="sourceCode"&gt;&lt;span id="1"&gt;&lt;a href="#1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;data&lt;/span&gt; &lt;span class="dt"&gt;Layout&lt;/span&gt;&lt;/span&gt; &lt;span id="2"&gt;&lt;a href="#2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Layout&lt;/span&gt;&lt;/span&gt; &lt;span id="3"&gt;&lt;a href="#3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; {&lt;span class="ot"&gt; siteTargets ::&lt;/span&gt; &lt;span class="dt"&gt;Site&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; [&lt;span class="dt"&gt;Target&lt;/span&gt;]&lt;/span&gt; &lt;span id="4"&gt;&lt;a href="#4" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; ,&lt;span class="ot"&gt; extraSectiontypes ::&lt;/span&gt; [&lt;span class="dt"&gt;ExtraSectionType&lt;/span&gt;]&lt;/span&gt; &lt;span id="5"&gt;&lt;a href="#5" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;In short, a &lt;code&gt;Layout&lt;/code&gt; has two main purposes:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;provide a &lt;code&gt;siteTargets&lt;/code&gt; that turns a &lt;code&gt;Site&lt;/code&gt; into a list of &lt;code&gt;Target&lt;/code&gt; &lt;/li&gt; &lt;li&gt;provide a &lt;code&gt;extraSectiontypes&lt;/code&gt; which is a list of Sections KitchenSink should learn how to parse &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The type parameters &lt;code&gt;ext&lt;/code&gt;, &lt;code&gt;summary&lt;/code&gt;, &lt;code&gt;meta&lt;/code&gt; and so on and so forth are required to let the Haskell compiler ensure that everything is consistent (e.g., you can only build Targets in &lt;code&gt;siteTargets&lt;/code&gt; for an extension if the extension is declared in &lt;code&gt;extraSectiontypes&lt;/code&gt;).&lt;/p&gt; &lt;h3 id="understanding-sitetargets"&gt;understanding &lt;code&gt;siteTargets&lt;/code&gt;&lt;/h3&gt; &lt;p&gt;A Layout gets to decide how to translate the in-memory represention of a whole Site into files, including their content-generation logic.&lt;/p&gt; &lt;p&gt;Thus what is important is to get some example of &lt;code&gt;siteTargets&lt;/code&gt; function. And understand, at least at a shallow-level, what is a Target.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;data Target ext a = Target { destination :: DestinationLocation , productionRule :: ProductionRule ext , summary :: a } deriving (Functor) &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The &lt;code&gt;destination&lt;/code&gt; is roughly the HTTP path of where the content is placed. The &lt;code&gt;productionRule&lt;/code&gt; is roughly the IO-inducing code to generate the content (e.g., rendering some HTML, copying some file, or executing a command). Finally, the &lt;code&gt;summary&lt;/code&gt; serves the purpose of having previews (e.g., in the search box).&lt;/p&gt; &lt;p&gt;In short, a Target contains enough information &lt;strong&gt;to locate, describe, and build&lt;/strong&gt; some document piece of your website.&lt;/p&gt; &lt;p&gt;Let’s now open KitchenSink’s default &lt;code&gt;siteTargets&lt;/code&gt; function at a first-level of details:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;siteTargets :: OutputPrefix -&amp;gt; MetaData -&amp;gt; Site -&amp;gt; [Target] siteTargets prefix extra site = allTargets where allTargets = mconcat [ embeddedGeneratorTargets , embeddedDataTargets , fmap fst articleTargets , imageTargets prefix site , dotimageTargets prefix site , videoTargets prefix site , rawTargets prefix site , documentTargets prefix site , cssTargets prefix site , jsTargets prefix site , htmlTargets prefix site , topicIndexesTargets (lookupSpecialArticle SpecialArticles.Topics site) , topicAtomTargets (lookupSpecialArticle SpecialArticles.Topics site) , glossaryTargets (lookupSpecialArticleSource SpecialArticles.Glossary site) , jsonDataTargets , seoTargets ] &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Unsurprisingly, the default &lt;code&gt;siteTargets&lt;/code&gt; parrots what the documentation pages about &lt;a href="/sections.html"&gt;sections&lt;/a&gt; and &lt;a href="/other-formats.html"&gt;other types of files&lt;/a&gt; decribe. Each family of document, each specific section in article files, each magic-file (like glossaries) gets a specific target. Each of these functions then have different techniques (e.g., HTML targets will render some HTML using an HTML-layout library, JSON targets will use Aeson-encoding of some structure etc.)&lt;/p&gt; &lt;p&gt;As you can guess, writing a whole new &lt;code&gt;siteTargets&lt;/code&gt; is a lot of work. That’s why we recommend to start contacting me before jumping into such an endeavor. Longer-term I’d like to have support for templated-targets, much like Dhall, but with a mini language better-suited for markup (like Mustache or ERB for instance).&lt;/p&gt; &lt;h3 id="some-words-on-extrasectiontypes"&gt;some words on &lt;code&gt;extraSectiontypes&lt;/code&gt;&lt;/h3&gt; &lt;p&gt;The way KitchenSink divides work operates in two phases:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;load the &lt;code&gt;Site&lt;/code&gt; object &lt;ul&gt; &lt;li&gt;read articles from disk (we discuss only &lt;code&gt;.cmark&lt;/code&gt;, but other files like &lt;code&gt;.png&lt;/code&gt; are listed too) &lt;/li&gt; &lt;li&gt;parsing content of &lt;code&gt;.cmark&lt;/code&gt; as section format &lt;/li&gt; &lt;li&gt;evaluating &lt;code&gt;.dhall&lt;/code&gt; sections &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;assemble targets &lt;ul&gt; &lt;li&gt;compute all the siteTargets (cf. above) &lt;/li&gt; &lt;li&gt;evaluate all the targets &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If you were to extend the &lt;code&gt;.cmark&lt;/code&gt; file with some form of new section type (e.g., you want to support some “license” section), you would have to modify KitchenSink in both phases:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;during the &lt;strong&gt;load&lt;/strong&gt; phase: you need a name &lt;code&gt;ext:my-license-extension&lt;/code&gt; so that the loader recognizes &lt;code&gt;=ext:my-license-extension&lt;/code&gt; like &lt;code&gt;=base:main-content.cmark&lt;/code&gt; &lt;/li&gt; &lt;li&gt;for the &lt;strong&gt;assemble&lt;/strong&gt; phase: you later need &lt;code&gt;Assembler&lt;/code&gt; functions (that are capable of reading article sections) to decide how your license is interpreted and rendered in your Website layout. &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Following the type-machinery should be enough. One remark though: there is one single “extension” parameter, so if you want to support multiple ones, you should build a sum-type of the extensions you support.&lt;/p&gt; &lt;h2 id="extending-kitchensink-in-other-forms"&gt;Extending KitchenSink in other forms&lt;/h2&gt; &lt;p&gt;You may want to modify KitchenSink in ways we have not discussed yet. For intance, you may want to support new filetypes (e.g., &lt;code&gt;docx&lt;/code&gt; documents) in an existing family of filetypes, or new families of file types altogether (e.g., source code of some form).&lt;/p&gt; &lt;p&gt;Such changes are feasible but not &lt;em&gt;that easily&lt;/em&gt;. Your best chance likely is to &lt;a href="https://dicioccio.fr/about-me.html"&gt;contact me&lt;/a&gt; or by opening an issue on the &lt;a href="https://github.com/kitchensink-tech/kitchensink"&gt;GitHub page&lt;/a&gt;.&lt;/p&gt; &lt;h2 id="summary"&gt;Summary&lt;/h2&gt; &lt;p&gt;You want to modify how a given article is rendered using an existing Article layout:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;a) modify &lt;code&gt;=base:build-info.json&lt;/code&gt; section &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;You want to modify the structure of the generated HTML (or create an Article Layout):&lt;/p&gt; &lt;ul&gt; &lt;li&gt;a) the &lt;code&gt;siteTargets&lt;/code&gt; function &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;You want to generate addition &lt;code&gt;.json&lt;/code&gt; magic file (or similar):&lt;/p&gt; &lt;ul&gt; &lt;li&gt;a) the &lt;code&gt;siteTargets&lt;/code&gt; function &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;You want to modify the structure of the rendered HTML:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;a) the &lt;code&gt;siteTargets&lt;/code&gt; function &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;You want to support a new section:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;a) modify the Layout to be able to parse the new data type &lt;/li&gt; &lt;li&gt;b) modify the &lt;code&gt;evalTarget&lt;/code&gt; function to apply the needed changes (most likely, you want to generate some extra information) &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;You want to support a new filetype:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;a) contact me &lt;/li&gt; &lt;li&gt;b) modify the Site loader &lt;/li&gt; &lt;li&gt;c) modify the Layout function with whatever you need to turn the filetype into a set of targets &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Other changes:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;a) contact me &lt;/li&gt; &lt;/ul&gt; &lt;/section&gt;&lt;/div&gt;
        </content>
        <link href="https://kitchensink-tech.github.io/layouts.html" rel="alternate"/>
        <summary type="text">
            There are two notions of layouts in KitchenSink: article layouts and website layouts. This article answers questions like: how do you change the layout of the blog? how do you extend KitchenSink?
        </summary>
    </entry>
    <entry>
        <id>
            https://kitchensink-tech.github.io/wishlist.html
        </id>
        <title type="text">
            Whishlist
        </title>
        <updated>
            1970-01-01T00:00:00Z
        </updated>
        <author>
            <name>
                Lucas DiCioccio
            </name>
        </author>
        <content type="html">
            &lt;div class="main-article"&gt;&lt;section class="main-section"&gt;&lt;ul&gt; &lt;li&gt;test and fix what we find on commonmark module &lt;/li&gt; &lt;li&gt;port all .js to a single PureScript lib, deprecate histogram &lt;/li&gt; &lt;li&gt;constellation mode/app to search/graph multiple kitchen-sinks &lt;/li&gt; &lt;li&gt;load from elsewhere than disk &lt;/li&gt; &lt;li&gt;support citation references &lt;/li&gt; &lt;li&gt;consider listing/index of all code snippets,images,etc. &lt;/li&gt; &lt;li&gt;hide zero-counts of links etc. &lt;/li&gt; &lt;/ul&gt; &lt;/section&gt;&lt;/div&gt;
        </content>
        <link href="https://kitchensink-tech.github.io/wishlist.html" rel="alternate"/>
        <summary type="text">
            A whishlist, which actually is a todolist.
        </summary>
    </entry>
    <entry>
        <id>
            https://kitchensink-tech.github.io/kitchen-sink-dot-json.html
        </id>
        <title type="text">
            The kitchen-sink-dot-json file
        </title>
        <updated>
            1970-01-01T00:00:00Z
        </updated>
        <author>
            <name>
                Lucas DiCioccio
            </name>
        </author>
        <content type="html">
            &lt;div class="main-article"&gt;&lt;section class="main-section"&gt;&lt;p&gt;When generating HTML content, most of the work can be done without context of “where” an application will be hosted. Unfortunately, some information do leak a bit. In particular, if you want to support some features like OpenGraph or RSS, you are supposed to know, at the time of generating the HTML and before publishing the HTML, the URL of published URLs. Rather than polluting all articles with this concern, we do it once for all articles. Enters the &lt;code&gt;kitchen-sink.json&lt;/code&gt; configuration file.&lt;/p&gt; &lt;h1 id="contents-of-kitchen-sinkjson"&gt;contents of kitchen-sink.json&lt;/h1&gt; &lt;p&gt;As the time of writing this article, &lt;code&gt;kitchen-sink.json&lt;/code&gt; supports the following keys:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;code&gt;title&lt;/code&gt;: the title on the index page and the prefix of per-articles titles &lt;/li&gt; &lt;li&gt;&lt;code&gt;publishURL&lt;/code&gt;: the url that will be added as prefix of links in permalinks &lt;/li&gt; &lt;li&gt;&lt;code&gt;twitterLogin&lt;/code&gt; (optional): the Twitter handle for the website, which may differ from the Twitter handle of individual authors &lt;/li&gt; &lt;li&gt;&lt;code&gt;commands&lt;/code&gt;: an array of json objects containing: &lt;ul&gt; &lt;li&gt;a &lt;code&gt;display&lt;/code&gt; for the text on the web &lt;/li&gt; &lt;li&gt;a &lt;code&gt;handle&lt;/code&gt; that must be unique across command and gives a command name, this value is used as a query-param (suggestion: a lower-kebab-case word) &lt;/li&gt; &lt;li&gt;a &lt;code&gt;exe&lt;/code&gt; as a path to a script that is executable from the webserver &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;code&gt;publishScript&lt;/code&gt; (deprecated, use a command instead): an historical “blessed” command. This is documented only if you ever encounter a kitchen-sink.json with this field, the support for this field will be removed in the feature. &lt;/li&gt; &lt;li&gt;&lt;code&gt;api&lt;/code&gt; (required,experimental): asks kitchen-sink, &lt;strong&gt;when run in DEV mode&lt;/strong&gt;, to proxy &lt;code&gt;/api&lt;/code&gt;-prefixed requests to an &lt;code&gt;[host,port]&lt;/code&gt; destination &lt;ul&gt; &lt;li&gt;the proper type is an Aeson-encoded Haskell datatype (i.e., using a level of JSON-object containing &lt;code&gt;tag&lt;/code&gt; and &lt;code&gt;contents&lt;/code&gt; keys) &lt;/li&gt; &lt;li&gt;values can either be &lt;ul&gt; &lt;li&gt;&lt;code&gt;{&amp;quot;tag&amp;quot;: &amp;quot;NoProxying&amp;quot;}&lt;/code&gt; &lt;/li&gt; &lt;li&gt;&lt;code&gt;{&amp;quot;tag&amp;quot;: &amp;quot;SlashApiProxy&amp;quot;, &amp;quot;contents&amp;quot;: [&amp;quot;localhost&amp;quot;,3000]}&lt;/code&gt; &lt;/li&gt; &lt;li&gt;&lt;code&gt;{&amp;quot;tag&amp;quot;: &amp;quot;SlashApiProxyList&amp;quot;, &amp;quot;contents&amp;quot;: [ {&amp;quot;security&amp;quot;: &amp;quot;UsePlainText&amp;quot;, &amp;quot;prefix&amp;quot;:&amp;quot;/api/appli-1&amp;quot;, &amp;quot;rewrite&amp;quot;: {&amp;quot;tag&amp;quot;: &amp;quot;NoRewrite&amp;quot;}, &amp;quot;hostname&amp;quot;:&amp;quot;localhost&amp;quot;, &amp;quot;portnum&amp;quot;:8001}, {&amp;quot;security&amp;quot;: &amp;quot;UseHTTPS&amp;quot;, &amp;quot;prefix&amp;quot;:&amp;quot;/api/appli-2&amp;quot;, &amp;quot;rewrite&amp;quot;: {&amp;quot;tag&amp;quot;: &amp;quot;NoRewrite&amp;quot;}, &amp;quot;hostname&amp;quot;:&amp;quot;some.example.com&amp;quot;, &amp;quot;portnum&amp;quot;:443} ]}&lt;/code&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;code&gt;linkedSites&lt;/code&gt; (optional, experimental): a series of json objects containing a listing of the external sites you consider especially important (and they show up on the site-graph for instance): &lt;ul&gt; &lt;li&gt;a &lt;code&gt;baseUrl&lt;/code&gt; string &lt;/li&gt; &lt;li&gt;a &lt;code&gt;siteTitle&lt;/code&gt; string &lt;/li&gt; &lt;li&gt;a &lt;code&gt;siteType&lt;/code&gt; string &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;An example of kitchen-sink.json&lt;/p&gt; &lt;div class="code code--highlighted"&gt;&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode"&gt;&lt;code class="sourceCode"&gt;&lt;span id="1"&gt;&lt;a href="#1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="fu"&gt;{&lt;/span&gt; &lt;span class="dt"&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;Kitchen Sink Default Page&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span id="2"&gt;&lt;a href="#2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="fu"&gt;,&lt;/span&gt; &lt;span class="dt"&gt;&amp;quot;publishURL&amp;quot;&lt;/span&gt;&lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;https://kitchensink.github.io&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span id="3"&gt;&lt;a href="#3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="fu"&gt;,&lt;/span&gt; &lt;span class="dt"&gt;&amp;quot;twitterLogin&amp;quot;&lt;/span&gt;&lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;lucasdicioccio&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span id="4"&gt;&lt;a href="#4" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="fu"&gt;,&lt;/span&gt; &lt;span class="dt"&gt;&amp;quot;commands&amp;quot;&lt;/span&gt;&lt;span class="fu"&gt;:&lt;/span&gt;&lt;/span&gt; &lt;span id="5"&gt;&lt;a href="#5" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; &lt;span class="ot"&gt;[&lt;/span&gt; &lt;span class="fu"&gt;{&lt;/span&gt;&lt;span class="dt"&gt;&amp;quot;display&amp;quot;&lt;/span&gt;&lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;publish to github&amp;quot;&lt;/span&gt;&lt;span class="fu"&gt;,&lt;/span&gt; &lt;span class="dt"&gt;&amp;quot;handle&amp;quot;&lt;/span&gt;&lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;publish&amp;quot;&lt;/span&gt;&lt;span class="fu"&gt;,&lt;/span&gt; &lt;span class="dt"&gt;&amp;quot;exe&amp;quot;&lt;/span&gt;&lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;./scripts/publish.sh&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;}&lt;/span&gt;&lt;/span&gt; &lt;span id="6"&gt;&lt;a href="#6" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; &lt;span class="ot"&gt;]&lt;/span&gt;&lt;/span&gt; &lt;span id="7"&gt;&lt;a href="#7" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="fu"&gt;,&lt;/span&gt; &lt;span class="dt"&gt;&amp;quot;api&amp;quot;&lt;/span&gt;&lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="fu"&gt;{&lt;/span&gt;&lt;span class="dt"&gt;&amp;quot;tag&amp;quot;&lt;/span&gt;&lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;SlashApiProxy&amp;quot;&lt;/span&gt;&lt;span class="fu"&gt;,&lt;/span&gt; &lt;span class="dt"&gt;&amp;quot;contents&amp;quot;&lt;/span&gt;&lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="ot"&gt;[&lt;/span&gt;&lt;span class="st"&gt;&amp;quot;localhost&amp;quot;&lt;/span&gt;&lt;span class="ot"&gt;,&lt;/span&gt; &lt;span class="dv"&gt;3000&lt;/span&gt;&lt;span class="ot"&gt;]&lt;/span&gt; &lt;span class="fu"&gt;}&lt;/span&gt;&lt;/span&gt; &lt;span id="8"&gt;&lt;a href="#8" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="fu"&gt;,&lt;/span&gt; &lt;span class="dt"&gt;&amp;quot;linkedSites&amp;quot;&lt;/span&gt;&lt;span class="fu"&gt;:&lt;/span&gt;&lt;/span&gt; &lt;span id="9"&gt;&lt;a href="#9" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; &lt;span class="ot"&gt;[&lt;/span&gt; &lt;span class="fu"&gt;{&lt;/span&gt;&lt;span class="dt"&gt;&amp;quot;baseURL&amp;quot;&lt;/span&gt;&lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;https://dicioccio.fr/&amp;quot;&lt;/span&gt;&lt;span class="fu"&gt;,&lt;/span&gt; &lt;span class="dt"&gt;&amp;quot;siteTitle&amp;quot;&lt;/span&gt;&lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;Lucas&amp;#39; blog.&amp;quot;&lt;/span&gt;&lt;span class="fu"&gt;,&lt;/span&gt; &lt;span class="dt"&gt;&amp;quot;siteType&amp;quot;&lt;/span&gt;&lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;kitchen-sink&amp;quot;&lt;/span&gt;&lt;span class="fu"&gt;}&lt;/span&gt;&lt;/span&gt; &lt;span id="10"&gt;&lt;a href="#10" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; &lt;span class="ot"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;{&lt;/span&gt;&lt;span class="dt"&gt;&amp;quot;baseURL&amp;quot;&lt;/span&gt;&lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;https://en.wikipedia.org/&amp;quot;&lt;/span&gt;&lt;span class="fu"&gt;,&lt;/span&gt; &lt;span class="dt"&gt;&amp;quot;siteTitle&amp;quot;&lt;/span&gt;&lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;The English WikiPedia.&amp;quot;&lt;/span&gt;&lt;span class="fu"&gt;,&lt;/span&gt; &lt;span class="dt"&gt;&amp;quot;siteType&amp;quot;&lt;/span&gt;&lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;website&amp;quot;&lt;/span&gt;&lt;span class="fu"&gt;}&lt;/span&gt;&lt;/span&gt; &lt;span id="11"&gt;&lt;a href="#11" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt; &lt;span class="ot"&gt;]&lt;/span&gt;&lt;/span&gt; &lt;span id="12"&gt;&lt;a href="#12" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="fu"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;publishScript&lt;/code&gt; here is very simple (switches to the output dir, git-add and commit everything, git pushes).&lt;/p&gt; &lt;h1 id="specifying-a-special-location"&gt;specifying a special-location&lt;/h1&gt; &lt;p&gt;The normal mode for KitchenSink is to locate &lt;code&gt;kitchen-sink.json&lt;/code&gt; in your site source directory. Thus, if your &lt;code&gt;--srcDir&lt;/code&gt; parameter is &lt;code&gt;foobar&lt;/code&gt;, KitchenSink will look for &lt;code&gt;foobar/kitchen-sink.json&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;You can override where to locate this special file with the &lt;code&gt;--ksFile&lt;/code&gt; command line argument.&lt;/p&gt; &lt;/section&gt;&lt;/div&gt;
        </content>
        <link href="https://kitchensink-tech.github.io/kitchen-sink-dot-json.html" rel="alternate"/>
        <summary type="text">
            The `kitchen-sink.json` file is simpble but quite important as it configures things like the URL of your blog.
        </summary>
    </entry>
    <entry>
        <id>
            https://kitchensink-tech.github.io/design-points.html
        </id>
        <title type="text">
            Design points
        </title>
        <updated>
            1970-01-01T00:00:00Z
        </updated>
        <author>
            <name>
                Lucas DiCioccio
            </name>
        </author>
        <content type="html">
            &lt;div class="main-article"&gt;&lt;section class="main-section"&gt;&lt;h1 id="the-default-site-loader-is-a-kitchen-sink"&gt;The default site-loader is a kitchen-sink&lt;/h1&gt; &lt;p&gt;This tradeoff gave name to the whole tool. In short, KitchenSink loads site contents in a directory which has no organization whatsoever. All files must be in a same directory and map to a target based on filenames and filetypes.&lt;/p&gt; &lt;p&gt;It is often the case that in static-site generators like Jekyll you need to organize your posts, categories and so on in a given directory structure, sometimes by year etc. Other ones, like Hakyll, requires you to configure globbing patterns. KitchenSink takes the opposite approach because what wrench my heart is when I see a personal blog with as few as two posts in them for someone who took all the time to setup a static-site generator.&lt;/p&gt; &lt;p&gt;Besides convenience, having a large kitchen sink means:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;we prevents the annoyance of conflicts in names, prefixing by year and so on can go in filenames &lt;/li&gt; &lt;li&gt;we reduce the URL churn because we often move and shake hierarchies around but the content of leaves remains unchanged (I’ve no data for this but it’s a feeling) &lt;/li&gt; &lt;li&gt;when you look for some file you know where it is &lt;/li&gt; &lt;li&gt;when you need to add some file you know where to put it &lt;/li&gt; &lt;li&gt;if someones grows out of the limitation of the single-directory approach, they met success and will be ready to allocate some time to either adapt KitchenSink to load the site from different place or to switch to another static-site generator &lt;/li&gt; &lt;/ul&gt; &lt;h1 id="layouts-are-hard-to-change"&gt;Layouts are hard to change&lt;/h1&gt; &lt;ul&gt; &lt;li&gt;Wordpress, Blogspot online services are a testimonial that tuning layouts may not be that much important for people; tuning layouts for people who really want to do it is feasible because the code is open-source, and corporations or professionals should afford to pay something more “hand-tuned” (they may even consider KitchenSink is not a good solution to their needs) &lt;/li&gt; &lt;li&gt;nowadays we can significantly alter the look and even some UX-interactivity with CSS only &lt;/li&gt; &lt;li&gt;you can even do JavaScript in KitchenSink pages to add even more “interactivity &lt;/li&gt; &lt;li&gt;you can even provide control of all the page to a single-page application if you want &lt;/li&gt; &lt;li&gt;I believe people should focus more time on the content rather than on the wrapping, thus having fewer knobs makes it a liberating constraint &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;span class="emoji" data-emoji="point_right"&gt;👉&lt;/span&gt; note that some re-engineering is going on in KitchenSink to separate the layout engine more cleanly from the rest of the engine. We could soon support some form of templates, however it is clearly not a direction I need personally at this point.&lt;/p&gt; &lt;h1 id="generator-sections-dont-take-input-data"&gt;Generator sections don’t take input data&lt;/h1&gt; &lt;ul&gt; &lt;li&gt;design is still unclear to me (static-website with dynamic envy) &lt;/li&gt; &lt;li&gt;sequence of steps may be better handled outside the generator &lt;/li&gt; &lt;li&gt;definitely a security risk that prevent some ‘hosting scenarios’ &lt;/li&gt; &lt;/ul&gt; &lt;h1 id="lack-of-overloading-repeating-many-things-across-articles"&gt;Lack of overloading (repeating many things across articles)&lt;/h1&gt; &lt;p&gt;&lt;span class="emoji" data-emoji="bulb"&gt;💡&lt;/span&gt; Much of this concerned is now addressable using &lt;a href="/sections-dhall.html"&gt;Dhall-sections&lt;/a&gt; sections because Dhall has local (and even remote) imports. However we keep the discussion below for archival reasons.&lt;/p&gt; &lt;p&gt;Oftentimes you would like one parameter to take effect on multiple pages (e.g., the social links). KitchenSink edges on the side of caution where we prefer to repeat the same small bit of information many times rather than forcing an overloading hierarchy:&lt;/p&gt; &lt;p&gt;Often you end up requiring to overload some “global parameter”, which means you need special documentation, special handling for overloading the parameter, which in turn means you need strictly more code just than just assuming the global parameter is empty. I call that &lt;em&gt;adding code to remove features&lt;/em&gt;.&lt;/p&gt; &lt;p&gt;For a blog-like page, I think it would be infrequent to add new pages. Adding one substential article per week means only around 50 articles a year. I’m pretty sure only few blog-like pages have that many articles and the effort to write them is diluted over long periods of time. Thus, overall, I prefer to force having a ‘social links’ session in every page. CSS is the only case I can think of where you’d need substential copy-pasting across articles. And for this use case, CSS supports &lt;code&gt;@import&lt;/code&gt; directives.&lt;/p&gt; &lt;p&gt;In the end, by repeating things across articles: the edge case where you want to tune a parameter on a single article is already supported with less code. The associated overhead is rather small and easy to circumvent with a low-tech solution (e.g., you’d copy section-based files from a template you keep around for yourself – much like the scaffolding in the &lt;a href="/getting-started.html"&gt;getting started article&lt;/a&gt;). In the eventual case where one needs to change values (e.g., they changed their Twitter handle), it is still possible to modify articles in batch with some shell scripting and &lt;code&gt;sed -i&lt;/code&gt;.&lt;/p&gt; &lt;/section&gt;&lt;/div&gt;
        </content>
        <link href="https://kitchensink-tech.github.io/design-points.html" rel="alternate"/>
        <summary type="text">
            This article gives a number of design points and architecture tradeoffs.
        </summary>
    </entry>
</feed>
